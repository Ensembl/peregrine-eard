/* 
 * Construction
 */

fold(libcore__push) code __code_push(seq(?X), ?X) -> seq(?X) {
    impl (r1: seq(number), r2: number) -> r1 {
        opcode 4, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 3, r3, r1, r2;
    }

    impl (r1: seq(string), r2: string) -> r1 {
        opcode 44, r1, r2;
    }

    impl (r1: seq(string), r2: string) -> r3: seq(string) {
        opcode 43, r3, r1, r2;
    }

    impl (r1: seq(boolean), r2: boolean) -> r1 {
        opcode 54, r1, r2;
    }

    impl (r1: seq(boolean), r2: boolean) -> r3: seq(boolean) {
        opcode 53, r3, r1, r2;
    }

    /* handles */
    impl (r1: seq(?X), r2: ?X) -> r1 {
        opcode 4, r1, r2;
    }

    /* handles */
    impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {
        opcode 3, r3, r1, r2;
    }
}

fold(libcore__infseq) code __code_infseq(?X) -> seq(?X) { 
    impl (r1: number) -> r2: seq(number) {
        opcode 8, r2, r1;
    }

    impl (r1: string) -> r2: seq(string) {
        opcode 41, r2, r1;
    }

    impl (r1: boolean) -> r2: seq(boolean) {
        opcode 51, r2, r1;
    }

    /* handles */
    impl (r1: ?X) -> r2: seq(?X) {
        opcode 8, r2, r1;
    }
}

world fold(libcore__finseq) code __code_finseq() -> seq(?X) {
    impl () -> r1: seq(number) { 
        opcode 9, r1;
    }

    impl () -> r1: seq(string) { 
        opcode 42, r1;
    }

    impl () -> r1: seq(boolean) { 
        opcode 52, r1;
    }

    /* handles */
    impl () -> r1: seq(?X) { 
        opcode 9, r1;
    }
}

/*
 * Checking
 */

fold(libcore__length) special(length) code __code_length(sparse seq(?X)) -> number {
    impl (r1: seq(number)) -> r2 : number {
        opcode 5, r2, r1;
    }

    impl (r1: seq(string)) -> r2 : number {
        opcode 45, r2, r1;
    }

    impl (r1: seq(boolean)) -> r2 : number {
        opcode 55, r2, r1;
    }

    /* handles */
    impl (r1: seq(?X)) -> r2 : ?X {
        opcode 5, r2, r1;
    }
}

fold(libcore__total) special(total) code __code_total(string,seq(number)) -> number {
    impl (r1: string, r2: seq(number)) -> r3 : number {
        opcode 6, r3, r1, r2;
    }
}

fold(libcore__bound) special(bound) code __code_bound(string,seq(number)) -> number {
    impl (r1: string, r2: seq(number)) -> r3 : number {
        opcode 7, r3, r1, r2;
    }
}

debug special(check_length) code __code_check_length(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 10, r1, r2, r3;
    }
}

debug special(check_total) code __code_check_total(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 11, r1, r2, r3;
    }
}

debug special(check_length_total) code __code_check_length_total(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 13, r1, r2, r3;
    }
}

debug special(check_length_bound) code __code_check_length_bound(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 14, r1, r2, r3;
    }
}

debug special(check_inf) code __code_check_inf(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 15, r1, r2, r3;
    }
}

debug special(check_length_inf) code __code_check_length_inf(string,number,number) {
    impl (r1: string, r2: number, r3: number) {
        opcode 16, r1, r2, r3;
    }
}

code __code_gaps(seq(number),seq(number),seq(number),seq(number),seq(number)) -> (seq(number),seq(number),seq(number)) {
    impl (r1: seq(number), r2: seq(number), r3: seq(number), r4: seq(number), r5: seq(number)) -> (r6: seq(number), r7: seq(number), r8: seq(number)) {
        opcode 159, r6, r7, r8, r1, r2, r3, r4, r5;
    }
}

export function __operator_infseq(x) { let y = __code_infseq(x); y }
export function __operator_finseq() { let y = __code_finseq(); y }
export procedure __operator_push(x,y) { let y = __code_push(x,y); y }
export function __operator_length(x) { let y = __code_length(x); y }

export function __test_length(x) { let y = __code_length(x); y }
export function __test_total(s,x) { let y = __code_total(s,x); y }
export function __test_bound(s,x) { let y = __code_bound(s,x); y }

export function len(x) { let y = __code_length(x); y }
export function push(x,v) { let z = __code_push(x,y); z }
export procedure gaps(s,e,bs,be,bi) { let (zs,ze,zi) = __code_gaps(s,e,bs,be,bi); (zs,ze,zi) }
