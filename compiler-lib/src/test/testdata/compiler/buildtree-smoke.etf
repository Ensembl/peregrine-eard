>> test

Code blocks

>> input

world code test(seq(?X) length(?X), boolean length(?X...)) -> (seq(boolean) ref(?X), boolean) {

  impl (r1: seq(number), r2: boolean) -> (r3: seq(boolean), r5: boolean) {
    opcode 44, r1, r2, r3, r4, r5;
  }

  impl (r1: seq(string), r2: boolean) -> (r3: seq(boolean), r5: boolean) {
    opcode 44, r1, r2, r3, r4, r5;
  }

  impl (r1: seq(number), r2: boolean) -> (r3: seq(boolean), r1) {
    opcode 45, r1, r2, r3, r4;
  }

  impl (r1: seq(string), r2: boolean) -> (r3: seq(boolean), r1) {
    opcode 45, r1, r2, r3, r4;
  }
}

>> built strip skip-commas

0: 
world code test(seq(?X) length(X), boolean length(X...)) -> (seq(boolean) ref(X), boolean )  {

  impl (r1 : seq(number), r2 : boolean) -> (r3 : seq(boolean), r5 : boolean)  {
     opcode 44, r1, r2, r3, r4, r5;
  }

  impl (r1 : seq(string), r2 : boolean) -> (r3 : seq(boolean), r5 : boolean)  {
    opcode 44, r1, r2, r3, r4, r5;
  }

  impl (r1 : seq(number), r2 : boolean) -> (r3 : seq(boolean), r1)  {
    opcode 45, r1, r2, r3, r4;
  }

  impl (r1 : seq(string), r2 : boolean) -> (r3 : seq(boolean), r1)  {
    opcode 45, r1, r2, r3, r4;
  }

}

>> test

Let in PT->BT

>> input

function __operator_add(x,y) { /* dummy */ 0 }
function __operator_mul(x,y) { /* dummy */ 0 }

procedure test(x) { 
    let y = x+1;
    ( 42*x, 23*y )
}

let (a,b) = (1+1,2+2);
let (c,d) = test(6);
(c,d) = (d,c);

>> built strip

0:func (x,y) {
  (0)
}

1:func (x,y) {
  (0)
}

2:proc (x) {
  test:5 (r1) <- #2 (0#1 x 1)
  test:5 let y
  test:5 (y) <- #3 r1
  ((1#4 42 x),(1#5 23 y))
}

test:2 define 0
test:3 define 1
test:5 define 2
test:10 (r2) <- #7 (0#6 1 1)
test:10 (r3) <- #9 (0#8 2 2)
test:10 let a
test:10 let b
test:10 (a) <- #10 r2
test:10 (b) <- #11 r3
test:11 (r4 r5) <- (2#12 6)
test:11 let c
test:11 let d
test:11 (c) <- #13 r4
test:11 (d) <- #14 r5
test:12 (r6) <- #15 d
test:12 (r7) <- #16 c
test:12 (c) <- #17 r6
test:12 (d) <- #18 r7

>> test

Simple PT->BT smoke test

>> input

function __operator_infseq(x) { /* dummy */ 0 }
function __operator_finseq(x) { /* dummy */ 0 }
procedure __operator_push(x) { /* dummy */ 0 }
function __operator_add(x,y) { /* dummy */ 0 }
function __operator_sub(x,y) { /* dummy */ 0 }
function __operator_mul(x,y) { /* dummy */ 0 }

procedure test(x) -> (number,number|seq(number) length(?X)) {
    ( 42*x, 23*x )
}

let x = 1;
let y = 2;
let z : length(y) = x+y;
test([z+1,...],[x-1,y+1]);
let (a,b) = test(6);

>> built strip

0:func (x) {
  (0)
}

1:func (x) {
  (0)
}

2:proc (x) {
  (0)
}

3:func (x,y) {
  (0)
}

4:func (x,y) {
  (0)
}

5:func (x,y) {
  (0)
}

6:proc (x) -> (number,number|seq(number) length(X)) {
  ((5#1 42 x),(5#2 23 x))
}

test:2 define 0
test:3 define 1
test:4 define 2
test:5 define 3
test:6 define 4
test:7 define 5
test:9 define 6
test:13 (r1) <- #3 1
test:13 let x
test:13 (x) <- #4 r1
test:14 (r2) <- #5 2
test:14 let y
test:14 (y) <- #6 r2
test:15 (r3) <- #8 (3#7 x y)
test:15 let z
test:15 (z) <- #9 r3
test:15 z <check> length(y)
test:16 (r4) <- (1#12)
test:16 (r4) <- (2#14 r4 (4#13 x 1))
test:16 (r4) <- (2#16 r4 (3#15 y 1))
test:16 (6#17 (0#11 (3#11 z 1)) r4)
test:17 (r5 r6) <- (6#18 6)
test:17 let a
test:17 let b
test:17 (a) <- #19 r5
test:17 (b) <- #20 r6

>> test

check repetar no proc

>> input

program "group" "program" 1;

world code wc(number) -> number { impl (r1: number) -> r2: number { opcode 999,r2, r1; } }
procedure c(x) { let y = wc(x); y }

let x.a = 1;
let x.b = false;

let **y = **x;

let y.a = c(y.a);

c(y.a);
c(x.a);

>> built strip


0:world code wc(number ) -> (number )  {
   impl (r1 : number) -> (r2 : number)  { opcode 999, r2, r1; }
}

1:proc (x) {
  test:5 (r1) <- (0#1 x)
  test:5 let y
  test:5 (y) <- #2 r1
  (y)
}

test:2 program "group" "program" 1
test:5 define 1
test:7 (r2) <- #3 1
test:7 let x.a
test:7 (x.a) <- #4 r2
test:8 (r3) <- #5 false
test:8 let x.b
test:8 (x.b) <- #6 r3
test:10 let **y
test:10 (**y) <- #7 **x
test:12 (r4) <- (1#8 y.a)
test:12 let y.a
test:12 (y.a) <- #9 r4
test:14 (1#10 y.a)
test:15 (1#11 x.a)

>> generate strip

r1 <- 1
opcode 999, r2, r1
opcode 999, r0, r2
opcode 999, r0, r1
