>> test

Reserved words prohibited in identifiers.

>> input

let true = false;

>> parse-fail strip

expected repeater or let_decls

>> test

Variables with and without prefixes.

>> input

let x = true;
let x.y = false;

>> parse strip

[
    PTStatement {
        value: LetStatement([(x,[])],[Constant(true)]),
        position: test:2,
        context: 1

    },
    PTStatement {
        value: LetStatement([(x.y,[])],[Constant(false)]),
        position: test:3,
        context: 1
    }
]

>> test

Macro identifiers

>> input

let x = test!("macro");

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Call(PTCall{
                name: "test",
                args: [Constant("macro")],
                is_macro: true
            })]
        ),
        position: test:2,
        context: 1
    }
]

>> test

Includes

>> input

include "abc";

>> parse strip

[
    PTStatement {
        value: Include("abc",false),
        position: test:2,
        context: 1
    }
]

>> test

Check annotations

>> input

let x : length(a) length(bb...) total(ccc) ref(dddd) = [1,2,3];

>> parse strip

[
    PTStatement {
        value: LetStatement([(x,[
                length(a),
                length(bb...),
                total(ccc),
                ref(dddd)
            ])],
            [FiniteSequence([Constant(1),Constant(2),Constant(3)])]
        ),
        position: test:2,
        context: 1
    }
]

>> test

Annotations need identifiers

>> input

let x : = 3;

>> parse-fail strip

expected check_annotation

>> test

Modify statement

>> input

let x = [1,2,3];
x = [4,5,6];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([Constant(1),Constant(2),Constant(3)])]
        ),
        position: test:2,
        context: 1
    },
    PTStatement {
        value: ModifyStatement(
            [x],
            [FiniteSequence([Constant(4),Constant(5),Constant(6)])]
        ),
        position: test:3,
        context: 1
    }
]

>> test

Bare statement

>> input

c(1,2,3);

>> parse strip

[
    PTStatement {
        value: Expression(Call(PTCall{
            name: "c",
            args: [
                Constant(1),
                Constant(2),
                Constant(3)
            ],
            is_macro: false
        })),
        position: test:2,
        context: 1
    }
]

>> test

Top-level macro

>> input

test!("123");

>> parse strip

[
    PTStatement {
        value: MacroCall(PTCall{name:"test",args:[Constant("123")],is_macro:true}),
        position: test:2,
        context: 1
    }
]

>> test

Multiple lets

>> input

let (a,b,c) = (x,y,z);

>> parse strip

[
    PTStatement{
        value:LetStatement([
            (a,[]),
            (b,[]),
            (c,[])
        ],[
            Variable(x),
            Variable(y),
            Variable(z)
        ]),
        position: test:2,
        context:1
    }
]

>> test

Multiple modify

>> input

(a,b,c) = (x,y,z);

>> parse strip

[
    PTStatement{
        value:ModifyStatement(
        [a,b,c],
        [
            Variable(x),
            Variable(y),
            Variable(z)
        ]),
        position: test:2,
        context:1
    }
]
