>> test

type smoke 1

>> input

program "test" "test" 1;

world code c (seq(?X) length(?Y)) -> (seq(?X) length(?Y)) {
    impl (r1: seq(boolean)) -> (r1) {
        opcode 14, r1;
    }
}

function f(x: ?X ) -> ?X { let y = c(x); y }
procedure p(x: number, y: seq(boolean) length(?X)) -> (number, seq(boolean) length(?X)) {
    (x,f(y))
}

let w : length(!w) = [true,false];
let (z1,z2 : length(w)) = p(1,w);

>> linearize strip reduce nolines

sequences:182 r1 (1#1) 
test:15 r7 <constant> true
sequences:183 r12 (2#2) r1 r7
test:15 r17 <constant> false
sequences:183 r22 (2#3) r12 r17
test:15 r22 <check:w>f Length 1
test:16 r29 <constant> 1
test:11 <sig> r29: number
test:11 <sig> r22: seq(boolean)
test:11 r22 <check:X> Length 1
test:11 <sig> r29: number
test:10 <sig> r22: ?X
test:10 r36 (3#4) r22
test:10 <sig> r36: ?X
test:10 <sig> r22: ?X ; r36: ?X
test:11 <sig> r36: seq(boolean)
test:11 r36 <check:X> Length 1
test:11 <sig> r29: number ; r22: seq(boolean) ; r29: number ; r36: seq(boolean)
test:16 r36 <check:w> Length 1

>> broad strip

atom: 7, 17, 29
seq: 1, 12, 22, 36

>> checking strip nolines

sequences:151 r1 (1#1) 
test:15 r7 <constant> true
sequences:152 r12 (2#2) r1 r7
test:15 r17 <constant> false
sequences:152 r22 (2#3) r12 r17
test:15 r46 <constant> "failed check of w at test:15"
test:15 r47 (3#5) r22
test:16 r29 <constant> 1
test:11 <sig> r29: number
test:11 <sig> r22: seq(boolean)
test:11 <sig> r29: number
test:10 <sig> r22: ?X
test:10 r36 (4#4) r22
test:10 <sig> r36: ?X
test:10 <sig> r22: ?X ; r36: ?X
test:11 <sig> r36: seq(boolean)
test:11 <sig> r29: number ; r22: seq(boolean) ; r29: number ; r36: seq(boolean)

>> narrow strip

boolean: 7, 17
number: 29, 47
seq(boolean): 1, 12, 22, 36
string: 46

>> test

checking fail

>> input

program "test" "test" 1;

code __code_infseq(?X) -> seq(?X) { impl (r1: ?X) -> r2: seq(?X) {} }
code __code_finseq() -> seq(?X) { impl () -> r1: seq(?X) {} }
code __code_push(seq(?X), ?X) -> seq(?X) { impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}}
function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

world code c (seq(?X) length(?Y)) -> (seq(?X) length(?Y)) {
    impl (r1: seq(boolean)) -> (r1) {
        opcode 14, r1;
    }
}

let a : length(!a) = [1,2];
let b : length(a) = [3,4];

>> checking-fail trim

checking error: cannot guarantee Length at test:18

>> test

checking assert

>> input

program "test" "test" 1;

code __code_infseq(?X) -> seq(?X) { impl (r1: ?X) -> r2: seq(?X) {} }
code __code_finseq() -> seq(?X) { impl () -> r1: seq(?X) {} }
code __code_push(seq(?X), ?X) -> seq(?X) { impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}}
function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

world code c (seq(?X) length(?Y)) -> (seq(?X) length(?Y)) {
    impl (r1: seq(boolean)) -> (r1) {
        opcode 14, r1;
    }
}

let a : length(!a) = [1,2];
let b : length(a) = [3,4];

>> checking-fail trim

checking error: cannot guarantee Length at test:18

>> test

checking success

>> input

program "test" "test" 1;

code __code_infseq(?X) -> seq(?X) { impl (r1: ?X) -> r2: seq(?X) {} }
code __code_finseq() -> seq(?X) { impl () -> r1: seq(?X) {} }
code __code_push(seq(?X), ?X) -> seq(?X) { impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}}
function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

world code c (seq(?X) length(?Y)) -> (seq(?X) length(?Y)) {
    impl (r1: seq(number)) -> (r1) {
        opcode 14, r1;
    }
}

let a : length(!a) = [1,2];
let b : length(!b) = [3,4];

>> checking strip nolines

test:8 r1 (1#1) 
test:17 r7 <constant> 1
test:9 r12 (2#2) r1 r7
test:17 r17 <constant> 2
test:9 r22 (2#3) r12 r17
test:17 r55 <constant> "failed check of a at test:17"
test:17 r56 (3#7) r22
test:8 r29 (1#4) 
test:18 r34 <constant> 3
test:9 r39 (2#5) r29 r34
test:18 r43 <constant> 4
test:9 r48 (2#6) r39 r43
test:18 r57 <constant> "failed check of b at test:18"
test:18 r58 (3#8) r48

>> narrow strip

number: 7, 17, 34, 43, 56, 58
seq(number): 1, 12, 22, 29, 39, 48
string: 55, 57

>> test

checking success 2

>> input

program "test" "test" 1;

code __code_infseq(?X) -> seq(?X) { impl (r1: ?X) -> r2: seq(?X) {} }
code __code_finseq() -> seq(?X) { impl () -> r1: seq(?X) {} }
code __code_push(seq(?X), ?X) -> seq(?X) { impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}}
function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

world code c (seq(?X) length(?Y)) -> (seq(?X) length(?Y)) {
    impl (r1: seq(number)) -> (r1) {
        opcode 14, r1;
    }
}

let a : length(!a) = [1,2];
let b : length(a) = c(a);

>> checking strip nolines

test:8 r1 (1#1) 
test:17 r7 <constant> 1
test:9 r12 (2#2) r1 r7
test:17 r17 <constant> 2
test:9 r22 (2#3) r12 r17
test:17 r34 <constant> "failed check of a at test:17"
test:17 r35 (3#5) r22
test:18 r30 (4#4) r22

>> narrow strip

number: 7, 17, 35
seq(number): 1, 12, 22, 30
string: 34

>> test

type bug

>> input

program "test" "test" 1;

procedure p(x : ?X, z : ?Z) -> (?Y,seq(?Y),?Z) {
    ("",[],z)
}

let (c,d,f) = p(1,"hi");

>> linearize strip reduce nolines

test:8 r1 <constant> 1
test:8 r2 <constant> "hi"
test:4 <sig> r1: ?X
test:4 <sig> r2: ?Z
sequences:182 r5 (1#1) 
test:4 r10 <constant> ""
test:4 <sig> r10: ?Y
test:4 <sig> r5: seq(?Y)
test:4 <sig> r2: ?Z
test:4 <sig> r1: ?X ; r2: ?Z ; r10: ?Y ; r5: seq(?Y) ; r2: ?Z

>> narrow strip

number: 1
seq(string): 5
string: 2, 10

>> test

type challenge

>> input

program "test" "test" 1;

world code __code_print(?X) { impl (r1: ?X) {} }
procedure print(x: ?X) { __code_print(x); }

procedure p(x : ?X, z : ?Z) -> (seq(?X),?X,?Y,seq(?Y),seq(?Y),?Z) {
    ([x],x,"",[],[],z)
}

function q(x: seq(string),w: seq(?X)) -> seq(?X) { w }
procedure r(r: seq(number)) { 0 }

let (a,b,c,d,e,f) = p(1,"hi");
let f2 = r(q(d,[]));
print(a);
print(b);
print(c);
print(d);
print(e);
print(f);

>> linearize strip reduce nolines

test:14 r1 <constant> 1
test:14 r2 <constant> "hi"
test:7 <sig> r1: ?X
test:7 <sig> r2: ?Z
sequences:182 r5 (1#1) 
sequences:183 r16 (2#2) r5 r1
sequences:182 r20 (1#3) 
sequences:182 r24 (1#4) 
test:7 <sig> r16: seq(?X)
test:7 <sig> r1: ?X
test:7 r28 <constant> ""
test:7 <sig> r28: ?Y
test:7 <sig> r20: seq(?Y)
test:7 <sig> r24: seq(?Y)
test:7 <sig> r2: ?Z
test:7 <sig> r1: ?X ; r2: ?Z ; r16: seq(?X) ; r1: ?X ; r28: ?Y ; r20: seq(?Y) ; r24: seq(?Y) ; r2: ?Z
sequences:182 r47 (1#5) 
test:11 <sig> r20: seq(string)
test:11 <sig> r47: seq(?X)
test:11 <sig> r47: seq(?X)
test:11 <sig> r20: seq(string) ; r47: seq(?X) ; r47: seq(?X)
test:12 <sig> r47: seq(number)
test:12 r56 <constant> 0
test:12 <sig> r47: seq(number)
test:5 <sig> r16: ?X
test:5  (3#6) r16
test:5 <sig> r16: ?X
test:5 <sig> r1: ?X
test:5  (3#7) r1
test:5 <sig> r1: ?X
test:5 <sig> r28: ?X
test:5  (3#8) r28
test:5 <sig> r28: ?X
test:5 <sig> r20: ?X
test:5  (3#9) r20
test:5 <sig> r20: ?X
test:5 <sig> r24: ?X
test:5  (3#10) r24
test:5 <sig> r24: ?X
test:5 <sig> r2: ?X
test:5  (3#11) r2
test:5 <sig> r2: ?X

>> narrow strip

number: 1, 56
seq(number): 5, 16, 47
seq(string): 20, 24
string: 2, 28

>> test

reject multi-wild 1 args

>> input

program "test" "test" 1;

procedure p(x: ?X | ?Y) {}

>> built-fail trim

only one wildcard allowed per argument at test:4

>> test

reject multi-wild 2 args

>> input

program "test" "test" 1;

procedure p(x: ?X | seq(?X)) {}

>> built-fail trim

only one wildcard allowed per argument at test:4

>> test

reject multi-wild 3 args

>> input

program "test" "test" 1;

procedure p(x: seq(number) | seq(?X)) {}

>> built-fail trim

cannot mix wild and non-wild types in argument at test:4

>> test

sequence wildcard

>> input

program "test" "test" 1;

code __code_infseq(?X) -> seq(?X) { impl (r1: ?X) -> r2: seq(?X) {} }
code __code_finseq() -> seq(?X) { impl () -> r1: seq(?X) {} }
code __code_push(seq(?X), ?X) -> seq(?X) { impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}}
function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

procedure p(x: ?X, y: seq(?X)) {}

>> test

type soak

>> input

program "test" "test" 1;

function f(a: string|number|seq(number)|seq(string)) { a }

f([1,2,3]);
f("hi");

>> checking strip nolines

sequences:182 r1 (1#1) 
test:6 r7 <constant> 1
sequences:183 r12 (2#2) r1 r7
test:6 r17 <constant> 2
sequences:183 r22 (2#3) r12 r17
test:6 r26 <constant> 3
sequences:183 r31 (2#4) r22 r26
test:4 <sig> r31: string, number, seq(number), seq(string)
test:4 <sig> r31: string, number, seq(number), seq(string)
test:7 r36 <constant> "hi"
test:4 <sig> r36: string, number, seq(number), seq(string)
test:4 <sig> r36: string, number, seq(number), seq(string)

>> test

type soak 2

>> input

program "test" "test" 1;

function f(a: string|seq(string)|number|seq(number)) { a }

f(true);

>> narrow-fail strip

cannot deduce type/B at test:4 (called from test:6)

>> test

type soak 3

>> input

program "test" "test" 1;

function f(a: string|seq(number)) { a }

f(1);

>> built-fail strip

sequence types must match non-sequence types in single signature at test:4
