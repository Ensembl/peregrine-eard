
>> test

regression

>> input

program "group" "program" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 21, r2 ,r1; } }
function c(x) { let y = wc(x); y }

c([c(1)]);
c([c(true)]);

>> linearize strip reduce nolines

sequences:157 r1 (1#1) 
test:7 r7 <constant> 1
test:5 r10 (2#2) r7
sequences:158 r18 (3#3) r1 r10
test:5 r25 (2#4) r18
sequences:157 r28 (1#5) 
test:8 r33 <constant> true
test:5 r36 (2#6) r33
sequences:158 r43 (3#7) r28 r36
test:5 r49 (2#8) r43

>> reuse strip nolines

sequences:151 r1 <- []n
test:7 r7 <- 1
test:5 r10 (1#2) r7
sequences:152 r18 (2#3) r1 r10
test:5 r0 (1#4) r18
sequences:151 r28 <- []b
test:8 r33 <- true
test:5 r36 (1#6) r33
sequences:152 r43 (2#7) r28 r36
test:5 r0 (1#8) r43

>> generate strip

r1 <- 1
opcode 21, r2, r1
r1 <- []n
opcode 4, r1, r2
opcode 21, r0, r1
r1 <- true
opcode 21, r2, r1
r1 <- []b
opcode 54, r1, r2
opcode 21, r0, r1

>> test

check 1

>> input

program "group" "program" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 21, r2 ,r1; } }
function c(x) { let y = wc(x); y }

let a : length(!x) = c([1,2,3]);
let b : length(!x) = c([4,5]);
print(format(a));
print(format(b));

>> reordered strip nolines

sequences:152 r31 <- [1,2,3]
test:5 r37 (1#5) r31
print:13 r78 (2#10) r37
test:7 r93 (3#14) r37
sequences:152 r63 <- [4,5]
test:5 r69 (1#9) r63
print:13 r87 (2#12) r69
test:8 r95 (3#15) r69
test:8 r96 <- "failed check of x for check_length at test:8"
test:8  (4#16) r96 r95 r93
print:14  (5#11) r78
print:14  (5#13) r87

>> generate strip

r1 <- [1,2,3]
opcode 21, r2, r1
opcode 138, r1, r2
opcode 5, r3, r2
r2 <- [4,5]
opcode 21, r4, r2
opcode 138, r2, r4
opcode 5, r5, r4
r4 <- "failed check of x for check_length at test:8"
opcode 10, r4, r5, r3
opcode 137, r1
opcode 137, r2
