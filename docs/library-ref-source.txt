> introduction

This manual is a quick-reference for all builtin functions. It gives the name, arguments and return types and whether they can/must be sequences, and whether any sequences can be infinite. ?X denotes a wildcard, any type but where all match. atom means non-sequence. opcodes are given but during regular programming these will not be relevent: they are useful during debugging.

> section libcore
> introduction

Libcore contains everything which isn't overly specialist, and which you would expect a programming language to support and without any dependencies on the genome browser.

> name push
> opcodes 3,4,43,44,53,54
> signature seq(?X),?X) -> seq(?X)
> arg 1 finite sequence to use as base
> arg 2 new value to add
> res 1 finite sequence with value on end

Pushes an item onto the end of an array and returns the updated array.

> name len
> opcodes 5,45,55
> signature seq(?X) -> number
> arg 1 finite sequence to measure
> res 1 length

Return length of finite array.

> name gaps
> opcodes 159
> signature (seq(number),seq(number),seq(number),seq(number),seq(number)) -> (seq(number),seq(number),seq(number))
> arg 1 starts of principal set of intervals (finite)
> arg 2 ends of principal set of intervals (finite)
> arg 3 starts of set of intervals to remove (finite)
> arg 4 ends of set of intervals to remove (finite)
> arg 5 which of the principal sets each of the intervals to remove belongs to (finite)
> res 1 starts of remaining intervals (finite)
> res 2 ends of remaining intervals (finite)
> res 3 which of the principal sets each of the remaining intervals belongs to (finite)

Given two sets of intervals, find the asymmetric difference between them, and return the new set. For example, given a set of transcripts and exons, return the introns.

> name find
> opcodes 160, 261
> signature (seq(?X),atom(?X)) -> number
> signature (seq(?X),seq(?X)) -> seq(number)
> arg 1 haystack (finite)
> arg 2 needle (finite)
> res 1 position of needle in haystack, -1 if missing (finite)

Given the array haystack, look for each member of needle andreturn its index. -1 indicates not found.

> name join
> opcodes 106
> signature (string,seq(string)) -> string
> arg 1 joiner
> arg 2 parts (finite)
> res 1 joined string

Given a finite sequence of strings in parts, join them with the joiner string as a separator and return.

> name push_str
> opcodes 107,108,155,156
> signature (string,string) -> string
> signature (string,seq(string)) -> seq(string)
> signature (seq(string),string) -> seq(string)
> signature (seq(string),seq(string)) -> seq(string)
> arg 1 prefix (finite)
> arg 2 suffix (finite)
> res 1 output

Join given strings together. If one argument is a sequence prefix/suffix is added to all members. If both are, they must be the same length and are added pairwise.

> name split
> opcodes 109
> signature (string,string) -> seq(string)
> arg 1 separator
> arg 2 string to split
> res 1 split string

Split string into parts at given separator. Simpler but less powerful version of full splitting suite, split_*.

> name split_start
> opcodes 111
> signature (string,seq(string)) -> handle(split)
> arg 1 separator
> arg 2 input
> res 1 handle to use to extract results

Start splitting a sequence of strings with the given separator. Returns a handle to be used with split_get to retrieve a particular column. This advanced kind of split (compared to split()) is designed to handle CSV-like situations.

> name split_get
> opcodes 112
> signature (handle(split), number) -> seq(string)
> arg 1 split handle from split_start
> arg 2 column to retrieve

Retrieve result of given column from previous call to split_start. See split_start for details.

> name template_start
> opcodes 113
> signature (string) -> handle(template)
> arg 1 template string
> res 1 handle to use to prepare template

Build sequence of templated strings with arguments to be provided by other calls. Template uses {0}, {1} etc placeholders.

> name template_set
> opcodes 114
> signature (handle(template), number, seq(string))
> arg 1 template handle from template_start
> arg 2 index of argument provided
> arg 3 values provided

Add the given values in argument 3 to the position given in argument 2. See template_start for details.

> name template_end
> opcodes 115
> signature (handle(template)) -> seq(string)
> arg 1 template handle from template_start
> res 1 resulting strings

Given the handle provided by template_start, and after allnecessary calls to template_set, return resulting strings.

> name template
> opcodes 110
> signature (string,seq(string)) -> string
> arg 1 template
> arg 2 values
> res 1 resulting string

Simpler version of template suite for when just one string is needed. Takes template and sequence of values and returns finished string.

> name print
> opcodes 137
> signature (string)
> arg 1 string to print

Prints a string (typically on console, whatever that is for a given environment).

> name format
> opcodes 138
> signature (?X) -> string
> arg 1 anything
> res 1 a string

Convert anything into a debug string format, probably for printing.

> name comma_format
> opcodes 153, 154
> signature (number) -> string
> signature (seq(number)) -> string
> arg 1 number to convert
> res 1 formatted with commas

Put thousand-separating commas into a number

> name operator "!" (not)
> opcodes 28, 29, 39, 40
> signature (boolean) -> boolean
> signature (seq(boolean)) -> seq(boolean)
> arg 1 boolean or booleans
> res 1 negation of input

Negates input: true => false; false => true.

> name operator "&&" (and)
> opcodes 80, 81, 82, 83, 84, 85
> signature (boolean,boolean) -> boolean
> signature (boolean,seq(boolean)) -> seq(boolean)
> signature (seq(boolean),boolean) -> seq(boolean)
> signature (seq(boolean),seq(boolean)) -> seq(boolean)
> arg 1 boolean or booleans, first argument
> arg 2 boolean or booleans, second argument
> res 1 first agrument anded with second argument

Logically ands first argument with second. Either input (or both) may be a sequence. In which case output is a sequence.

> name operator "||" (or)
> opcodes 86, 87, 88, 89, 90, 91
> signature (boolean,boolean) -> boolean
> signature (boolean,seq(boolean)) -> seq(boolean)
> signature (seq(boolean),boolean) -> seq(boolean)
> signature (seq(boolean),seq(boolean)) -> seq(boolean)
> arg 1 boolean or booleans, first argument
> arg 2 boolean or booleans, second argument
> res 1 first agrument ored with second argument

Logically ors first argument with second. Either input (or both) may be a sequence. In which case output is a sequence.

> name any
> opcodes 116
> signature (seq(boolean)) -> boolean
> arg 1 list of booleans
> res 1 true if any are true (false if list is empty)

Looks for a "true" in the supplied list and returns true if it finds one, otherwise false. This means the empy list is false.

> name all
> opcodes 117
> signature (seq(boolean)) -> boolean
> arg 1 list of booleans
> res 1 true if all are true (true if list is empty)

Looks for a "false" in the supplied list and returns false if it finds one, otherwise true. This means the empy list is true.

> name position
> opcodes 118
> signature (seq(boolean)) -> seq(number)
> arg 1 list of booleans
> res 1 list of zero-based indexes where value is true

Returns all (zero-based) indexes of the input array where the input is true. In order.

> name halt
> opcodes 2
> signature (boolean)
> arg 1 should the script halt?

The script halts without error if the argument is true.

> name operator ">" (greater than)
> opcodes 26, 48, 58, 157
> signature (number,number) -> boolean
> signature (seq(number),number) -> seq(boolean)
> signature (number,seq(number)) -> seq(boolean)
> signature (seq(number),seq(number)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is greater than second

Compares arguments and returns true if first is greater than second. If either is sequence, result will be sequence.

> name operator "<=" (less than or equal to)
> opcodes 26, 48, 58, 157
> signature (number,number) -> boolean
> signature (seq(number),number) -> seq(boolean)
> signature (number,seq(number)) -> seq(boolean)
> signature (seq(number),seq(number)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is less than or equal to the second

Compares arguments and returns true if first is less than or equal to second. If either is sequence, result will be sequence.

> name operator "<" (less than)
> opcodes 27, 49, 59, 158
> signature (number,number) -> boolean
> signature (seq(number),number) -> seq(boolean)
> signature (number,seq(number)) -> seq(boolean)
> signature (seq(number),seq(number)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is less than second

Compares arguments and returns true if first is less than second. If either is sequence, result will be sequence.

> name operator ">=" (greater than or equal to)
> opcodes 27, 49, 59, 158
> signature (number,number) -> boolean
> signature (seq(number),number) -> seq(boolean)
> signature (number,seq(number)) -> seq(boolean)
> signature (seq(number),seq(number)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is greater than or equal to the second

Compares arguments and returns true if first is greater than or equal to second. If either is sequence, result will be sequence.

> name operator "==" (equal to)
> opcodes 30, 31, 32, 33, 34, 35, 36, 37, 38
> signature (?X,?X) -> boolean
> signature (seq(?X),?X) -> seq(boolean)
> signature (?X,seq(?X)) -> seq(boolean)
> signature (seq(?X),seq(?X)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is equal to the second

Compares arguments and returns true if first is equal to second. If either is sequence, result will be sequence.

> name operator "!=" (not equal to)
> opcodes 30, 31, 32, 33, 34, 35, 36, 37, 38
> signature (?X,?X) -> boolean
> signature (seq(?X),?X) -> seq(boolean)
> signature (?X,seq(?X)) -> seq(boolean)
> signature (seq(?X),seq(?X)) -> seq(boolean)
> arg 1 first argument to compare to second
> ret 1 true if first is equal to the second

Compares arguments and returns true if first is not equal to second. If either is sequence, result will be sequence.

> name to_boolean
> opcodes 125, 126, 127, 128
> signature atom(?X) -> boolean
> signature seq(?X) -> seq(boolean)
> arg 1 convert any value to a boolean or a sequence of booleans

Convert value or sequence of values into boolean or sequence of values. Non-empty strings and non-zero numbers are true.

> name to_number
> opcodes 129, 130, 131, 132
> signature atom(?X) -> number
> signature seq(?X) -> seq(number)
> arg 1 convert any value to a number or a sequence of numbers

Convert value or sequence of values into number or sequence of numbers. Booleans get 0 for false, 1 for true; strings are parsed as decimal numbers.

> name to_string
> opcodes 133, 134, 135, 136
> signature atom(?X) -> string
> signature seq(?X) -> seq(string)
> arg 1 convert any value to a string or a sequence of strings

Convert value or sequence of values into string or sequence of strings. Booleans get "false" for false, "true" for true; numbers are rendered as strings.

> name if
> opcodes 92, 93
> signature (boolean,?X,?X) -> ?X
> signature (seq(boolean),seq(?X),seq(?X)) -> seq(?X)
> arg 1 condition
> arg 2 value to use if condition is true
> arg 3 value to use if condition is false
> res 1 values based on condition

If first argument is true, second argument is returned; if first argment is false, third argument is returned. Arguments may be sequences, in which case they will be evaluated entry-by-entry.

> name set
> opcodes 94, 95
> signature (seq(?X),seq(boolean),seq(?X)) -> seq(?X)
> arg 1 sequence to use as basis for output
> arg 2 values to replace with entries third argument
> arg 3 replacement values for output
> res 1 result of computation

Outputs the first argument but with certain elements replaced with elements drawn from the third argument: those positions for which the second argument is true.

Elements are pulled from the third argument only as needed. For example, if the second argument contains only one "true", the third argument should only contain one (or an infinite number) of elements. See set_skip for alternative behaviour.

> name set_skip
> opcodes 96, 97
> signature (seq(?X),seq(boolean),seq(?X)) -> seq(?X)
> arg 1 sequence to use as basis for output
> arg 2 values to replace with entries third argument
> arg 3 replacement values for output
> res 1 result of computation

Outputs the first argument but with certain elements replaced with elements drawn from the third argument: those positions for which the second argument is true.

Elements are pulled from the third argument at the position of the replacement. Therefore, the first and third arguments should be the same length. For example, if the second argument contains only one "true" at position seven, the seventh value from the third argument will replace the seventh value of the first argument. See set for alternative behaviour.

> name set_at
> opcodes 98, 99
> signature (seq(?X),seq(number),seq(?X)) -> seq(?X)
> arg 1 sequence to use as basis for output
> arg 2 index of values to replace with entries third argument
> arg 3 replacement values for output
> res 1 result of computation

Outputs the first argument but with certain elements replaced with elements drawn from the third argument: those at indexes given in the second argument.

> name set_from
> opcodes 100, 101
> signature (seq(?X),seq(number),seq(?X)) -> seq(?X)
> arg 1 sequence to use as basis for output
> arg 2 index of values to replace with entries third argument
> arg 3 replacement values for output
> res 1 result of computation

Outputs the first argument but with its initial elements replaced with elements drawn from the third argument: at the indexes in the third argument given in the second argument, placed at the start. This is an obscure set vairant which is rarely the version you want except in unusual situations. You probably want set or set_at.

> name repeat
> opcodes 50
> signature (?X,number) -> seq(?X)
> arg 1 value to repeat
> arg 2 number of repeats
> res 1 repeats of given value

Repeats the first argument the number of times given by the second argument.

> name index
> opcodes 102, 103
> signature (seq(?X),number) -> ?X
> signature (seq(?X),seq(number)) -> seq(?X)
> arg 1 sequence to pull indexes from
> arg 2 index or indexes at which to retrieve indexes
> res 1 retrieved indexes

Retrieve from the first argument the element at the second index. If the second is a sequence, a sqeuence of values is returned.

> name count
> opcodes 104
> signature (seq(number)) -> seq(number)
> arg 1 length of each sequence
> res 1 counted repeats according to first argument

Puts counts from zero, in increments of one, into the result, repeated according to each value in the argument. For example [2,1,3,2] will return [0,0,1,2,2,2,3,3]. Used to create objects useful in defining relationships between data entities. Compare to enumerate.

> name enumerate
> opcodes 105
> signature (seq(number)) -> seq(number)
> arg 1 length of each sequence
> res 1 multiple counted repeats according to first argument

Puts counts from zero, in increments of one, into the result, up to the value in the first position of the argument. Then, from zero, up to the value of the second argument. And so on. For example [2,1,3,2] will return [0,1,0,0,1,2,0,1]. Used to create objects useful in defining relationships between data entities. Compare to count.

> name select
> opcodes 12
> signature (seq(?X),seq(boolean)) -> seq(?X)
> arg 1 input to select from
> arg 2 values to select
> res 1 selected values

Copy values at "true" positions of second argument from first argument into result, skipping agruments which match to "false" positions. For example select([11,22,33],[false,true,true]) would yield [22,33].

> name base_flip
> opcodes 149, 150
> signature (string) -> string
> signature (seq(string)) -> seq(string)
> arg 1 sequence of bases
> res 1 complementary base of input

Converts bases to complimentary bases.

> name operator "+" (add)
> opcodes 17, 18, 60, 61, 70, 71
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 first agrument added to second argument

Add given arguments. If either arguments is a sequence, a sequence is returned.

> name operator "-" (subtract)
> opcodes 19, 20, 62, 63, 72 ,73
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 first agrument minus second argument

Subtract given arguments. If either arguments is a sequence, a sequence is returned.

> name operator "*" (multiply)
> opcodes 22, 23, 64, 65, 74, 75
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 first agrument multiplied by second argument

Multiply given arguments. If either arguments is a sequence, a sequence is returned.

> name operator "/" (divide)
> opcodes 22, 23, 64, 65, 74, 75
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 first agrument divided by second argument

Divide given arguments. If either arguments is a sequence, a sequence is returned.


> name operator "%" (modulus)
> opcodes 119, 120, 121, 122, 123, 124
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 remainder of first agrument after dividing by second argument

Divide given arguments and return the remainder. If either arguments is a sequence, a sequence is returned.

> name operator "-" (unary minus)
> opcodes 68, 69, 78, 79
> signature (number) -> number
> signature (seq(number)) -> seq(number)
> arg 1 number or numbers to negate
> res 1 negation of argument

Return negation of given argument. If argument is sequence, a sequence is returned.

> name max
> opcodes 46, 47,141, 142, 143, 144
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 largest of first and second arguments

Returns maximum of two arguments. A sequence is returned if either argument is a sequence. If both are sequences, inputs are compared pairwise.

> name min
> opcodes 56, 57, 145, 146, 147, 148
> signature (number,number) -> number
> signature (number,seq(number)) -> seq(number)
> signature (seq(number),number) -> seq(number)
> signature (seq(number),seq(number)) -> seq(number)
> arg 1 number or numbers, first argument
> arg 2 number or numbers, second argument
> res 1 smallest of first and second arguments

Returns minimum of two arguments. A sequence is returned if either argument is a sequence. If both are sequences, inputs are compared pairwise.

> name max_seq
> opcodes 139
> signature (seq(number)) -> number
> arg 1 a collection of numbers to find the maximum of
> res 1 the maximum value

Returns the largest member of the given sequence.

> name min_seq
> opcodes 140
> signature (seq(number)) -> number
> arg 1 a collection of numbers to find the minimum of
> res 1 the minimum value

Returns the smallest member of the given sequence.

> name ruler_interval
> opcodes 151
> signature (number,number,seq(number)) -> number
> arg 1 total range to cover
> arg 2 maximum number of markings on panel
> arg 3 marcking scheme to use
> res 1 interval to use for markings

How far apart should ruler markings be given the supplied total range, maximum number or matkings,and  given the allowed marking divisions in the third argument.

For marking scheme include in the third argument:

1xxx 2xxx 3xxx -> include 1
10xx 12xx 14xx 18xx 20xx -> include 2
10xx 15xx 20xx -> include 5

> name ruler_markings
> opcodes 152
> signature (number,number,number) -> seq(number)
> arg 1 start coordinate
> arg 2 end coordinate
> arg 3 interval to use (eg supplied by output of ruler_interval)
> res 1 places to put a ruler marking

Given start and end coordinates and the chosen interval output the sequence of marks to add.

> section libeoe

> section libperegrine
