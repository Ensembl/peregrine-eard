// TODO other code statements
// TODO reserved

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("//" ~ (!"\n" ~ ANY)* ~ "\n") | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

/* general */

reserved = @{
    ("false" | "true" | "include" | "number" | "string" | "boolean" | "handle" | "seq" | "code" |
    "world" | "opcode" | "register" | "flag" | "function" | "procedure" | "let" | "refer" | "impl") ~ 
    (WHITESPACE|(!"_" ~ PUNCTUATION))
}

identifier = @{ !reserved ~ (ASCII_ALPHA|"_") ~ (ASCII_ALPHANUMERIC|"_")* }
macro_identifier = @{ !reserved ~ (ASCII_ALPHA|"_") ~ (ASCII_ALPHANUMERIC|"_")* ~ "!" }

string = ${ ("\"\"\"" ~ multi_string_inner ~ "\"\"\"")|("\"" ~ string_inner ~ "\"") }

string_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

multi_string_inner = @{ multi_char* }
multi_char = {
    !("\"\"\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "0")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

boolean = { "false" | "true" }

finite_seq  = { "[" ~ seq_inner? ~ "]" }
infinite_seq = { "[" ~ expression ~ "," ~ "..." ~ "]" }
seq_inner = _{ expression ~ ("," ~ expression)* }

constant = { number|string|boolean }

number = @{ 
    "-"? ~ 
    ("0"|( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* )) ~ 
    ("." ~ ASCII_DIGIT+)? ~
    ("e" ~ ("+"|"-")? ~ ASCII_DIGIT+)?
}

include = { "include" ~ string ~ ";" }
fixed_include = { "refer" ~ string ~ ";" }

/* checks */
maybe_force_check = { "!" | "" }

length_check = { "length(" ~ maybe_force_check ~ identifier ~ ")" }
lengthorinf_check = { "length(" ~ maybe_force_check ~ identifier ~ "..." ~ ")" }
total_check = { "total(" ~ maybe_force_check ~ identifier ~ ")" }
ref_check = { "ref(" ~ maybe_force_check ~ identifier ~ ")" }

check_annotation = { length_check | lengthorinf_check | total_check | ref_check }

/* arguments */
arg_types = { (arg_type ~ ("|" ~ arg_type)*)? }
arg_type = { arg_atomic_type | arg_seq_type | arg_seq_wild_type | arg_atom_wild_type | arg_wild_type }
arg_atomic_type = { "number" | "string" | "boolean" | ("handle(" ~ (identifier|arg_wild_type) ~ ")")  }
arg_atom_wild_type = { "atom(" ~  arg_wild_type ~ ")" }
arg_seq_type = { "seq(" ~ arg_atomic_type ~ ")" }
arg_seq_wild_type = { "seq(" ~ arg_wild_type ~ ")" }
arg_wild_type = { "?" ~ arg_check_variable }

arg_check_variable = { ASCII_ALPHA_UPPER+ }

arg_length_check = { "length(" ~ "?" ~ arg_check_variable ~ ")" }
arg_lengthorinf_check = { "length(" ~ "?" ~ arg_check_variable ~ "..." ~ ")" }
arg_total_check = { "total(" ~ "?" ~ arg_check_variable ~ ")" }
arg_ref_check = { "ref(" ~ "?" ~ arg_check_variable ~ ")" }

arg_check = { arg_length_check | arg_lengthorinf_check | arg_total_check | arg_ref_check }

/* code blocks */
code_block = { code_header ~ "{" ~ code_impl* ~ "}" }
code_header = {
     code_modifiers ~ "code" ~ identifier ~ "(" ~ code_arguments ~ ")" ~ code_return
}

code_return =  { ("->" ~ (("(" ~ code_return_arguments ~ ")")|code_arg))? }
code_return_arguments = _{ code_arg ~ ("," ~ code_arg)* }
code_arguments = { (code_arg ~ ("," ~ code_arg)*)? }
code_arg = { arg_type ~ arg_check* }

code_impl = { impl_header ~ "{" ~  opcode_statement? ~ "}" }

version_spec_part = @{ ("<="|">="|"<"|">"|"=") ~ ASCII_DIGIT+ }
version_spec = { version_spec_part* }
version = { "version(" ~ version_spec ~ ")" }

impl_header = { "impl" ~ "(" ~ impl_arguments ~ ")" ~ impl_return }

impl_return =  { ("->" ~ (("(" ~ impl_return_arguments ~ ")")|impl_return_var))? }
impl_return_arguments = _{ impl_return_var ~ ("," ~ impl_return_var)* }
impl_arguments = { (impl_arg_var ~ ("," ~ impl_arg_var)*)? }

impl_return_var = { (impl_real_arg|register|constant) }
impl_arg_var = { (impl_real_arg|constant) }

impl_real_arg = { register ~ ":" ~ arg_type }

/* code blocks */
world = { "world" }
debug = { "debug" }
fold = { "fold(" ~ identifier ~ ")" }
special = { "special(" ~ identifier ~ ")" }
code_modifier = { world | fold | debug | special }
code_modifiers = { code_modifier* }

register = { "r" ~ ASCII_DIGIT+ }

opcode_opcode = { ASCII_DIGIT+ }
opcode_statement = { "opcode" ~ opcode_opcode ~ opcode_args ~ ";" }
opcode_args = { ("," ~ register)* }

/* operators */

infix1 = { "*"|"/"|"%" }
infix2 = { "+"|"-" }
infix3 = { ">="|"<="|">"|"<" }
infix4 = { "=="|"!=" }
infix5 = { "&&" }
infix6 = { "||" }

prefix_operators = { "!"|"-" }

/* expressions */

prefix = { identifier }
repeater = { "**" ~ prefix  }
bundle = { "*" ~ prefix }
variable = { (prefix ~ "." ~ identifier) | identifier }

argument = { expression | bundle | repeater }
arguments = _{ argument ~ ("," ~ argument)* }
func_or_proc_call = { identifier ~ "(" ~ arguments? ~ ")" }
macro_call = { macro_identifier ~ "(" ~ arguments? ~ ")" }

simple_expression = { 
    ("(" ~ expression ~ ")") |
    finite_seq |
    infinite_seq |
    constant |
    (prefix_operators ~ simple_expression) |
    macro_call |
    func_or_proc_call |
    variable
}

expr1 = { simple_expression ~ (infix1 ~ simple_expression)* }
expr2 = { expr1 ~ (infix2 ~ expr1)* }
expr3 = { expr2 ~ (infix3 ~ expr2)* }
expr4 = { expr3 ~ (infix4 ~ expr3)* }
expr5 = { expr4 ~ (infix5 ~ expr4)* }
expr6 = { expr5 ~ (infix6 ~ expr5)* }

expression = { expr6 }

/* functions, procedures and macros */

funcproc_arg_extras = { ":" ~ arg_types ~ arg_check* }
funcproc_arg_named = { identifier ~ funcproc_arg_extras? }
funcproc_arg = { funcproc_arg_named|bundle }
funcproc_args = { (funcproc_arg ~ ( "," ~ funcproc_arg)*)? }

funcproc_return_type = { arg_types ~ arg_check* }
function_return = { ("->" ~ funcproc_return_type)? }

function_value = { expression|bundle }

entry = { "entry" }
export = { "export" }
func_modifier = { export | version }
func_modifiers = { func_modifier* }
proc_modifier = { export | version | entry }
proc_modifiers = { proc_modifier* }

// XXX let bundle call
capture = { variable | bundle }
capture_decl = {
    "capture" ~ capture ~ ( "," ~ capture)* ~ ";"
}

capture_decls = { capture_decl* }

function = {
    func_modifiers ~
    "function" ~ identifier ~ "(" ~ funcproc_args ~ ")" ~ function_return  ~ "{" ~
        capture_decls ~
        inner_block* ~ function_value ~
    "}"
}

procedure_return_types = _{ funcproc_return_type ~ ("," ~ funcproc_return_type)* }
procedure_return = { "->" ~ (("(" ~ procedure_return_types ~ ")")| funcproc_return_type )  }
procedure_return_option = { procedure_return? }

procedure_expression = { ("(" ~ expr_or_bundle ~ ("," ~ expr_or_bundle)* ~ ")")| expr_or_bundle? }

procedure = {
    proc_modifiers ~
    "procedure" ~ identifier ~ "(" ~ funcproc_args ~ ")" ~ procedure_return_option  ~ "{" ~
        capture_decls ~
        inner_block* ~ procedure_expression ~
    "}"
}

/* statements */

let_decl = {
    (variable ~ (":" ~ check_annotation+)?) |
    bundle
}

let_decls = {
    ( "(" ~ (let_decl ~ ("," ~ let_decl)*) ~ ")" ) |
    let_decl |
    repeater
}

expr_or_bundle = { expression | bundle }

rhs_tuple = {
    ( "(" ~ (expression ~ ("," ~ expression)*) ~ ")"  ~ ";" ) |
    expression ~ ";"
}

let_rhs_tuple = {
    ( "(" ~ (expr_or_bundle ~ ("," ~ expr_or_bundle)*) ~ ")"  ~ ";" ) |
    expr_or_bundle ~ ";"
}

let_statement = { 
    "let" ~ let_decls ~ "=" ~ let_rhs_tuple
}

modify_lvalue = _{
    ( "(" ~ ( variable ~ ("," ~ variable)* ) ~ ")" ) |
    variable
}

modify_statement = { modify_lvalue ~ "=" ~ rhs_tuple }

bare_statement = _{ expression ~ ";" }

inner_block = {
    let_statement |
    modify_statement |
    (macro_call ~ ";") |
    bare_statement
}

prog_version = { ASCII_DIGIT+ }
header = {
    "program" ~ string ~ string ~ prog_version ~ ";"
}

block = {
    header | /* Has to go at start of program, but this may not be the root file */
    code_block |
    include |
    fixed_include |
    function |
    procedure |
    inner_block
}

file = { SOI ~ block* ~ EOI }
