fold(libcore__add) code __code_add(number,number) -> number {
    impl (r1: number, 0) -> r1 {}

    impl (r1: number, 0) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 18, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 17, r3, r1, r2;
    }
}

fold(libcore__add) code __code_add(seq(number) length(?X),number) -> seq(number) length(?X) {
    impl (r1: seq(number), 0) -> r1 {}

    impl (r1: seq(number), 0) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: seq(number), r2: number) -> r1 {
        opcode 61, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 60, r3, r1, r2;
    }
}

fold(libcore__add) code __code_add(number,seq(number) length(?X)) -> seq(number) length(?X) {
    impl (0, r1: seq(number)) -> r1 {}

    impl (0, r1: seq(number)) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r1 {
        opcode 61, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r3: seq(number) {
        opcode 60, r3, r2, r1;
    }
}

fold(libcore__add) code __code_add(seq(number) length(?X),seq(number)) -> seq(number) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 71, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 70, r3, r1, r2;
    }
}

fold(libcore__sub) code __code_sub(number,number) -> number {
    impl (r1: number, 0) -> r1 {}

    impl (r1: number, 0) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 20, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 19, r3, r1, r2;
    }
}

fold(libcore__sub) code __code_sub(seq(number) length(?X),number) -> seq(number) length(?X) {
    impl (r1: seq(number), 0) -> r1 {}

    impl (r1: seq(number), 0) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: seq(number), r2: number) -> r1 {
        opcode 63, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 62, r3, r1, r2;
    }
}

fold(libcore__sub) code __code_sub(number,seq(number) length(?X)) -> seq(number) length(?X) {
    impl (0, r1: seq(number)) -> r1 {}

    impl (0, r1: seq(number)) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r1 {
        opcode 63, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r3: seq(number) {
        opcode 62, r3, r2, r1;
    }
}

fold(libcore__sub) code __code_sub(seq(number) length(?X),seq(number)) -> seq(number) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 73, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 72, r3, r1, r2;
    }
}

fold(libcore__mul) code __code_mul(number,number) -> number {
    impl (r1: number, 0) -> 0 {}

    impl (r1: number, 1) -> r1 {}

    impl (r1: number, 1) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 23, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 22, r3, r1, r2;
    }
}

fold(libcore__mul) code __code_mul(seq(number) length(?X),number) -> seq(number) length(?X) {
    impl (r1: seq(number), 0) -> r1 {}

    impl (r1: seq(number), 0) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: seq(number), r2: number) -> r1 {
        opcode 65, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 64, r3, r1, r2;
    }
}

fold(libcore__mul) code __code_mul(number,seq(number) length(?X)) -> seq(number) length(?X) {
    impl (0, r1: seq(number)) -> r1 {}

    impl (0, r1: seq(number)) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r1 {
        opcode 65, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r3: seq(number) {
        opcode 64, r3, r2, r1;
    }
}

fold(libcore__mut) code __code_mul(seq(number) length(?X),seq(number)) -> seq(number) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 75, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 74, r3, r1, r2;
    }
}

fold(libcore__div) code __code_div(number,number) -> number {
    impl (r1: number, 1) -> r1 {}

    impl (r1: number, 1) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 25, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 24, r3, r1, r2;
    }
}

fold(libcore__div) code __code_div(seq(number) length(?X),number) -> seq(number) length(?X) {
    impl (r1: seq(number), 0) -> r1 {}

    impl (r1: seq(number), 0) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: seq(number), r2: number) -> r1 {
        opcode 67, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 66, r3, r1, r2;
    }
}

fold(libcore__div) code __code_div(number,seq(number) length(?X)) -> seq(number) length(?X) {
    impl (0, r1: seq(number)) -> r1 {}

    impl (0, r1: seq(number)) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r1 {
        opcode 67, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r3: seq(number) {
        opcode 66, r3, r2, r1;
    }
}

fold(libcore__div) code __code_div(seq(number) length(?X),seq(number)) -> seq(number) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 77, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 76, r3, r1, r2;
    }
}

fold(libcore__mod) code __code_mod(number,number) -> number {
    impl (r1: number, 1) -> r1 {}

    impl (r1: number, 1) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 120, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 119, r3, r1, r2;
    }
}

fold(libcore__mod) code __code_mod(seq(number) length(?X),number) -> seq(number) length(?X) {
    impl (r1: seq(number), 0) -> r1 {}

    impl (r1: seq(number), 0) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: seq(number), r2: number) -> r1 {
        opcode 122, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 121, r3, r1, r2;
    }
}

fold(libcore__mod) code __code_mod(number,seq(number) length(?X)) -> seq(number) length(?X) {
    impl (0, r1: seq(number)) -> r1 {}

    impl (0, r1: seq(number)) -> r2: seq(number) {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r1 {
        opcode 122, r2, r1;
    }

    impl (r1: number, r2: seq(number)) -> r3: seq(number) {
        opcode 121, r3, r2, r1;
    }
}

fold(libcore__mod) code __code_mod(seq(number) length(?X),seq(number)) -> seq(number) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 124, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 123, r3, r1, r2;
    }
}

fold(libcore__minus) code __code_minus(number) -> number {
    impl (r1: number) -> r1 {
        opcode 69, r1;
    }

    impl (r1: number) -> r2 : number {
        opcode 68, r2, r1;
    }
}

fold(libcore__minus) code __code_minus(seq(number) length(?X)) -> seq(number) length(?X) {
    impl (r1: seq(number)) -> r1 {
        opcode 71, r1;
    }

    impl (r1: seq(number)) -> r2 : seq(number) {
        opcode 70, r2, r1;
    }
}

fold(libcore__max) code __code_max(number,number) -> number {
    impl (r1: number, r2: number) -> r1 {
        opcode 47, r1, r2;
    }

    impl (r1: number, r2: number) -> r2 {
        opcode 47, r2, r1;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 46, r3, r1, r2;
    }
}

fold(libcore__max) code __code_max(seq(number),number) -> seq(number) {
    impl (r1: seq(number), r2: number) -> r1 {
        opcode 142, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 141, r3, r1, r2;
    }
}

fold(libcore__max) code __code_max(seq(number),seq(number)) -> seq(number) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 144, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 143, r3, r1, r2;
    }
}

fold(libcore__min) code __code_min(number,number) -> number {
    impl (r1: number, r2: number) -> r1 {
        opcode 57, r1, r2;
    }

    impl (r1: number, r2: number) -> r2 {
        opcode 57, r2, r1;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 56, r3, r1, r2;
    }
}

fold(libcore__min) code __code_min(seq(number),number) -> seq(number) {
    impl (r1: seq(number), r2: number) -> r1 {
        opcode 146, r1, r2;
    }

    impl (r1: seq(number), r2: number) -> r3: seq(number) {
        opcode 145, r3, r1, r2;
    }
}

fold(libcore__min) code __code_min(seq(number),seq(number)) -> seq(number) {
    impl (r1: seq(number), r2: seq(number)) -> r1 {
        opcode 148, r1, r2;
    }

    impl (r1: seq(number), r2: seq(number)) -> r3: seq(number) {
        opcode 147, r3, r1, r2;
    }
}

fold(libcore__max_seq) code __code_max_seq(seq(number)) -> number {
    impl (r1: seq(number)) -> r2: number {
        opcode 139, r2, r1;
    }
}

fold(libcore__min_seq) code __code_min_seq(seq(number)) -> number {
    impl (r1: seq(number)) -> r2: number {
        opcode 140, r2, r1;
    }
}

export function __operator_add(a,b) { let y = __code_add(a,b); y }
export function __operator_sub(a,b) { let y = __code_sub(a,b); y }
export function __operator_mul(a,b) { let y = __code_mul(a,b); y }
export function __operator_div(a,b) { let y = __code_div(a,b); y }
export function __operator_mod(a,b) { let y = __code_mod(a,b); y }
export function __operator_minus(a) { let y = __code_minus(a); y }
export function max(a,b) { let z = __code_max(a,b); z }
export function max_seq(a) { let z = __code_max_seq(a); z }
export function min(a,b) { let z = __code_min(a,b); z }
export function min_seq(a) { let z = __code_min_seq(a); z }
