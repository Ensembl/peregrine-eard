fold(libcore__if) code __code_if(boolean,?X,?X) -> ?X {
    impl (true, r2: ?X, r3: ?X) -> r2 {}
    impl (false, r2: ?X, r3: ?X) -> r3 {}

    impl (r1: boolean, r2: ?X, r3: ?X) -> r4: ?X {
        opcode 92, r4, r1, r2, r3;
    }
}

code __code_if(seq(boolean),seq(?X),seq(?X)) -> seq(?X) {
    impl (r1: seq(boolean), r2: seq(?X), r3: seq(?X)) -> r4: seq(?X) {
        opcode 93, r4, r1, r2, r3;
    }
}

code __code_set(seq(?X) length(?X), seq(boolean), seq(?X)) -> seq(?X) length(?X) {
    impl (r1: seq(?X), r2: seq(boolean), r3: seq(?X)) -> r1 {
        opcode 95, r1, r2, r3;
    }

    impl (r1: seq(?X), r2: seq(boolean), r3: seq(?X)) -> r4: seq(?X) {
        opcode 94, r4, r1, r2, r3;
    }
}

code __code_set_skip(seq(?X) length(?X), seq(boolean), seq(?X)) -> seq(?X) length(?X) {
    impl (r1: seq(?X), r2: seq(boolean), r3: seq(?X)) -> r1 {
        opcode 97, r1, r2, r3;
    }

    impl (r1: seq(?X), r2: seq(boolean), r3: seq(?X)) -> r4: seq(?X) {
        opcode 96, r4, r1, r2, r3;
    }
}

code __code_set_at(seq(?X) length(?X), seq(number), seq(?X)) -> seq(?X) length(?X) {
    impl (r1: seq(?X), r2: seq(number), r3: seq(?X)) -> r1 {
        opcode 99, r1, r2, r3;
    }

    impl (r1: seq(?X), r2: seq(number), r3: seq(?X)) -> r4: seq(?X) {
        opcode 98, r4, r1, r2, r3;
    }
}

code __code_set_from(seq(?X) length(?X), seq(number), seq(?X)) -> seq(?X) length(?X) {
    impl (r1: seq(?X), r2: seq(number), r3: seq(?X)) -> r1 {
        opcode 101, r1, r2, r3;
    }

    impl (r1: seq(?X), r2: seq(number), r3: seq(?X)) -> r4: seq(?X) {
        opcode 100, r4, r1, r2, r3;
    }
}

fold(libcore__repeat) code __code_repeat(?X, number) -> large seq(?X) {
    impl (r1: ?X, r2: number) -> r3: seq(?X) {
        opcode 50, r3, r1, r2;
    }
}

fold(libcore__index) code __code_index(seq(?X), number) -> ?X {
    impl (r1: seq(?X), r2: number) -> r3: ?X {
        opcode 102, r3, r1, r2;
    }
}

fold(libcore__index) code __code_index(sparse seq(?X) length(?X), seq(number)) -> seq(?X) length(?X) {
    impl (r1: seq(?X), r2: seq(number)) -> r3: seq(?X) {
        opcode 103, r3, r1, r2;
    }
}

fold(libcore__count) code __code_count(seq(number)) -> large seq(number) {
    impl (r1: seq(number)) -> r2: seq(number) {
        opcode 104, r2, r1;
    }
}

fold(libcore__enumerate) code __code_enumerate(seq(number)) -> seq(number) {
    impl (r1: seq(number)) -> r2: seq(number) {
        opcode 105, r2, r1;
    }
}

export function if(p,a,b) { let z = __code_if(p,a,b); z }
export function set(x,p,y) { let z = __code_set(x,p,y); z }
export function set_skip(x,p,y) { let z = __code_set_skip(x,p,y); z }
export function set_at(x,p,y) { let z = __code_set_at(x,p,y); z }
export function set_from(x,p,y) { let z = __code_set_from(x,p,y); z }
export function repeat(d,n) { let z = __code_repeat(d,n); z }
export function index(s,i) { let z = __code_index(s,i); z }
export function count(x) { let z = __code_count(x); z }
export function enumerate(x) { let z = __code_enumerate(x); z }
