fold(libcore__eq) code __code_eq(atom(?X),atom(?X)) -> boolean {
    impl (r1: number, r2: number) -> r3: boolean {
        opcode 30, r3, r1, r2;
    }

    impl (r1: string, r2: string) -> r3: boolean {
        opcode 31, r3, r1, r2;
    }

    impl (r1: boolean, r2: boolean) -> r3: boolean {
        opcode 32, r3, r1, r2;
    }
}

fold(libcore__eq) code __code_eq(seq(?X) length(?X),atom(?X)) -> seq(boolean) length(?X) {
    impl (r1: seq(number), r2: number) -> r3: seq(boolean) {
        opcode 33, r3, r1, r2;
    }

    impl (r1: seq(string), r2: string) -> r3: seq(boolean) {
        opcode 34, r3, r1, r2;
    }

    impl (r1: seq(boolean), r2: boolean) -> r3: seq(boolean) {
        opcode 35, r3, r1, r2;
    }
}

fold(libcore__eq) code __code_eq(atom(?X),seq(?X) length(?X)) -> seq(boolean) length(?X) {
    impl (r1: number, r2: seq(number)) -> r3: seq(boolean) {
        opcode 33, r3, r2, r1;
    }

    impl (r1: string, r2: seq(string)) -> r3: seq(boolean) {
        opcode 34, r3, r2, r1;
    }

    impl (r1: boolean, r2: seq(boolean)) -> r3: seq(boolean) {
        opcode 35, r3, r2, r1;
    }
}

fold(libcore__eq) code __code_eq(seq(?X) length(?X),seq(?X)) -> seq(boolean) length(?X) {
    impl (r1: seq(number), r2: seq(number)) -> r3: seq(boolean) {
        opcode 36, r3, r1, r2;
    }

    impl (r1: seq(string), r2: seq(string)) -> r3: seq(boolean) {
        opcode 37, r3, r1, r2;
    }

    impl (r1: seq(boolean), r2: seq(boolean)) -> r3: seq(boolean) {
        opcode 38, r3, r1, r2;
    }
}

export function __operator_eq(a,b) { let y = __code_eq(a,b); y }
export function __operator_ne(a,b) { let y = !(__operator_eq(a,b)); y }
