fold(libcore__add) code __code_add(number,number) -> number {
    impl (r1: number, 0) -> r1 {}

    impl (r1: number, 0) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 18, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 17, r3, r1, r2;
    }
}

fold(libcore__sub) code __code_sub(number,number) -> number {
    impl (r1: number, 0) -> r1 {}

    impl (r1: number, 0) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 20, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 19, r3, r1, r2;
    }
}

fold(libcore__mul) code __code_mul(number,number) -> number {
    impl (r1: number, 0) -> 0 {}

    impl (r1: number, 1) -> r1 {}

    impl (r1: number, 1) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 23, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 22, r3, r1, r2;
    }
}

fold(libcore__div) code __code_div(number,number) -> number {
    impl (r1: number, 1) -> r1 {}

    impl (r1: number, 1) -> r2: number {
        opcode 21, r2, r1;
    }

    impl (r1: number, r2: number) -> r1 {
        opcode 25, r1, r2;
    }

    impl (r1: number, r2: number) -> r3: number {
        opcode 24, r3, r1, r2;
    }
}

fold(libcore__gt) code __code_gt(number,number) -> boolean {
    impl (r1: number, r2: number) -> r3: boolean {
        opcode 26, r3, r1, r2;
    }
}

fold(libcore__ge) code __code_ge(number,number) -> boolean {
    impl (r1: number, r2: number) -> r3: boolean {
        opcode 27, r3, r1, r2;
    }
}

fold(libcore__not) code __code_not(boolean) -> boolean {
    impl (r1: boolean) -> r1 {
        opcode 29, r1;
    }

    impl (r1: boolean) -> r2: boolean {
        opcode 28, r2, r1;
    }
}

fold(libcore__not) code __code_not(seq(boolean)) -> seq(boolean) {
    impl (r1: seq(boolean)) -> r1 {
        opcode 40, r1;
    }

    impl (r1: seq(boolean)) -> r2: seq(boolean) {
        opcode 39, r2, r1;
    }
}

/*
fold(libcore__eq_nn) code __code_eq(number,number) -> boolean {
    impl (r1: number, r2: number) -> r3: boolean {
        opcode 30, r3, r1, r2;
    }
}

fold(libcore__eq_ss) code __code_eq(string,string) -> boolean {
    impl (r1: string, r2: string) -> r3: boolean {
        opcode 31, r3, r1, r2;
    }
}

fold(libcore__eq_bb) code __code_eq(boolean,boolean) -> boolean {
    impl (r1: boolean, r2: boolean) -> r3: boolean {
        opcode 32, r3, r1, r2;
    }
}

fold(libcore__eq_nn) code __code_eq(seq(number),number) -> seq(boolean) {
    impl (r1: seq(number), r2: number) -> r3: seq(boolean) {
        opcode 33, r3, r1, r2;
    }
}

fold(libcore__eq_nn) code __code_eq(number,seq(number)) -> seq(boolean) {
    impl (r1: number, r2: seq(number)) -> r3: seq(boolean) {
        opcode 33, r3, r2, r1;
    }
}

fold(libcore__eq_nn) code __code_eq(seq(number),seq(number)) -> seq(boolean) {
    impl (r1: seq(number), r2: seq(number)) -> r3: seq(boolean) {
        opcode 36, r3, r1, r2;
    }
}

fold(libcore__eq_ss) code __code_eq(seq(string),string) -> seq(boolean) {
    impl (r1: seq(string), r2: string) -> r3: seq(boolean) {
        opcode 34, r3, r1, r2;
    }
}

fold(libcore__eq_ss) code __code_eq(string,seq(string)) -> seq(boolean) {
    impl (r1: string, r2: seq(string)) -> r3: seq(boolean) {
        opcode 34, r3, r2, r1;
    }
}

fold(libcore__eq_ss) code __code_eq(seq(string),seq(string)) -> seq(boolean) {
    impl (r1: seq(string), r2: seq(string)) -> r3: seq(boolean) {
        opcode 37, r3, r1, r2;
    }
}

fold(libcore__eq_bb) code __code_eq(seq(boolean),boolean) -> seq(boolean) {
    impl (r1: seq(boolean), r2: boolean) -> r3: seq(boolean) {
        opcode 35, r3, r1, r2;
    }
}

fold(libcore__eq_bb) code __code_eq(boolean,seq(boolean)) -> seq(boolean) {
    impl (r1: boolean, r2: seq(boolean)) -> r3: seq(boolean) {
        opcode 35, r3, r2, r1;
    }
}

fold(libcore__eq_bb) code __code_eq(seq(boolean),seq(boolean)) -> seq(boolean) {
    impl (r1: seq(boolean), r2: seq(boolean)) -> r3: seq(boolean) {
        opcode 38, r3, r1, r2;
    }
}
*/

export function __operator_add(a: number, b: number) -> number { let y = __code_add(a,b); y }
export function __operator_sub(a: number, b: number) -> number { let y = __code_sub(a,b); y }
export function __operator_mul(a: number, b: number) -> number { let y = __code_mul(a,b); y }
export function __operator_div(a: number, b: number) -> number { let y = __code_div(a,b); y }
export function __operator_gt(a: number, b: number) -> boolean { let y = __code_gt(a,b); y }
export function __operator_lt(a: number, b: number) -> boolean { let y = __code_gt(b,a); y }
export function __operator_ge(a: number, b: number) -> boolean { let y = __code_ge(a,b); y }
export function __operator_le(a: number, b: number) -> boolean { let y = __code_ge(b,a); y }
//export function __operator_eq(a: number, b: number) -> boolean { let y = __code_eq(a,b); y }
//export function __operator_ne(a: number, b: number) -> boolean { let y = !(__operator_eq(a,b)); y }
/*
export function __operator_and(a: boolean, b: boolean) -> boolean { let y = __code_and(a,b); y }
export function __operator_or(a: boolean, b: boolean) -> boolean { let y = __code_or(a,b); y }
export function __operator_minus(a: number) -> number { let y = __code_minus(a); y }
*/
export function __operator_not(a) { let y = __code_not(a); y }
