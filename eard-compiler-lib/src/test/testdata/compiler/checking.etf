>> test

length works

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_length([])));
print(format(__test_length([1])));
print(format(__test_length([1,2])));
print(format(__test_length([1,...])));
print(format(__test_length(c([]))));

>> generate strip

r1 <- "0"
opcode 137, r1
r1 <- "1"
opcode 137, r1
r1 <- "2"
opcode 137, r1
r1 <- "-1"
opcode 137, r1
r1 <- []b
opcode 55, r2, r1
opcode 138, r1, r2
opcode 137, r1

>> test

total works

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_total([])));
print(format(__test_total([1])));
print(format(__test_total([1,2])));
print(format(__test_total(c([1,2]))));
print(format(__test_total([1,...])));
print(format(__test_total([1.3,2])));

>> generate strip

r1 <- "0"
opcode 137, r1
r1 <- "1"
opcode 137, r1
r1 <- "3"
opcode 137, r1
r1 <- [1,2]
opcode 6, r2, r1
opcode 138, r1, r2
opcode 137, r1
r1 <- [1,...]
opcode 6, r2, r1
opcode 138, r1, r2
opcode 137, r1
r1 <- "-1"
opcode 137, r1

>> test

bound works

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_bound([])));
print(format(__test_bound([1])));
print(format(__test_bound([1,7,3])));
print(format(__test_bound(c([1,2]))));
print(format(__test_bound([1,...])));
print(format(__test_bound([1.3,2])));

>> generate strip

r1 <- "0"
opcode 137, r1
r1 <- "1"
opcode 137, r1
r1 <- "7"
opcode 137, r1
r1 <- [1,2]
opcode 7, r2, r1
opcode 138, r1, r2
opcode 137, r1
r1 <- [1,...]
opcode 7, r2, r1
opcode 138, r1, r2
opcode 137, r1
r1 <- "-1"
opcode 137, r1

>> test

checking length smoke

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!a) = c([3,4]);

>> generate strip

r1 <- [1,2]
opcode 5, r2, r1
r1 <- [3,4]
opcode 5, r3, r1
r1 <- "a"
opcode 10, r1, r3, r2

>> test

checking total smoke

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : total(!a) = c([7,3]);
let b : total(!a) = c([9,1]);
let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);

>> generate strip

r1 <- [7,3]
opcode 6, r2, r1
r1 <- [9,1]
opcode 6, r3, r1
r1 <- "a"
opcode 11, r1, r3, r2
r3 <- [0,1,2,3,4,5,6,7,8,9]
opcode 5, r4, r3
opcode 13, r1, r4, r2

>> test

checking length then total/bound

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);
let a : total(!a) = c([7,3]);
let b : ref(!a) = c([9,1]);

>> generate strip

r1 <- [0,1,2,3,4,5,6,7,8,9]
opcode 5, r2, r1
r1 <- [7,3]
opcode 6, r3, r1
r1 <- "a"
opcode 13, r1, r2, r3
r3 <- [9,1]
opcode 7, r4, r3
opcode 14, r1, r2, r4

>> test

checking or-inf

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a...) = c([1,2,3]);
let b : length(!a...) = c([4,...]);
let c : length(!a) = c([5,6,7]);

>> generate strip

r1 <- [1,2,3]
opcode 5, r2, r1
r1 <- [4,...]
opcode 5, r3, r1
r1 <- "a"
opcode 15, r1, r2, r3
r3 <- [5,6,7]
opcode 5, r4, r3
opcode 16, r1, r4, r2

>> test

checking collapse only one

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!b) = c([3,4]);

>> generate strip

r1 <- [1,2]
r1 <- [3,4]

>> test

logic length passthrough

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([true,false,true]);
let b : length(a) = !a && true || false;

let x : length(!x) = c([1]);
let y : length(x) = x == 0;
let z : length(x) = x != 0;
let zz : length(x) = 2+3*x>6;
let xx : length(x) = 7<=x/4%5;
c(a);
c(b);
c(x);
c(y);
c(z);
c(xx);
c(zz);

>> generate strip

r1 <- [true,false,true]
opcode 39, r2, r1
r3 <- [1]
r1 <- 0
opcode 33, r2, r3, r1
opcode 33, r4, r3, r1
r1 <- 3
opcode 65, r3, r1
r5 <- 4
opcode 66, r6, r3, r5
opcode 40, r4
r2 <- 2
opcode 61, r1, r2
r1 <- 6
opcode 48, r3, r2, r1
r2 <- 5
opcode 122, r6, r2
r4 <- 7
opcode 49, r5, r6, r4

>> test

logic pair passthrough

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([true,false,true]);
let b : length(a) = !a && a || a;

let x : length(!x) = c([1]);
let y : length(x) = x == x;
let z : length(x) = x != x;
let zz : length(x) = x+x*x>x;
let xx : length(x) = x<=x/x%x;
c(a);
c(b);
c(x);
c(y);
c(z);
c(xx);
c(zz);

>> generate strip

r1 <- [true,false,true]
opcode 39, r2, r1
opcode 85, r2, r1
opcode 91, r2, r1
r3 <- [1]
opcode 76, r1, r3, r3
opcode 36, r4, r3, r3
opcode 36, r5, r3, r3
opcode 74, r6, r3, r3
opcode 70, r7, r3, r6
opcode 58, r6, r7, r3
opcode 124, r1, r3
opcode 59, r7, r1, r3
opcode 40, r5
