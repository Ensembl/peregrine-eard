>> test

constfold smoke 1

>> input

program "test" "test" 1;

world fold(test) code test(number,number) -> number {
    impl (r1: number, r2: number) -> (r3: number) {
        opcode 14, r1;
    }
}

let a = test(5,4);

>> constfold strip

test:10 r1 <- 5
test:10 r2 <- 4
test:10 r3 <- 9

>> test

constfold smoke 2

>> input

program "test" "test" 1;

world fold(test) code test(number,number) -> number {
    impl (r1: number, r2: number) -> (r3: number) {
        opcode 14, r1;
    }
}

let a = test(5,5);

>> constfold strip

test:10 r1 <- 5
test:10 r2 <- 5
test:10 r3 (1#1) r1 r2

>> test

constfold smoke 3

>> input

program "test" "test" 1;

let a = [1,2,3];

>> constfold strip nolines

sequences:151 r1 <- []n
test:4 r7 <- 1
sequences:152 r12 <- [1]
test:4 r17 <- 2
sequences:152 r22 <- [1,2]
test:4 r26 <- 3
sequences:152 r31 <- [1,2,3]

>> test

constfold smoke 4

>> input

program "test" "test" 1;

let x = 1;
let a = [x-1,x,x+1];

>> constfold strip nolines

test:4 r1 <- 1
sequences:151 r5 <- []n
test:5 r12 <- 1
arith:394 r17 <- 0
sequences:152 r25 <- [0]
sequences:152 r35 <- [0,1]
test:5 r40 <- 1
arith:393 r45 <- 2
sequences:152 r53 <- [0,1,2]
