>> test

>> input

program "test" "test" 1;

world code code_gen() -> handle(h) { impl() -> r1: handle(h) { opcode 999, r1; } }
function gen() { let y = code_gen(); y }

world code code_eat(seq(handle(h))) { impl(r1: seq(handle(h))) { opcode 998, r1; } }
procedure eat(x) { code_eat(x); }

world code code_thru(seq(?X)) -> seq(?X) { impl(r1: seq(?X)) -> r2: seq(?X) { opcode 997, r2, r1; } }
function thru(x : seq(handle(h))) -> seq(handle(h)) { let x = code_thru(x); x }

let a = gen();
let b = thru([a,a,a]);
eat(b);

>> linearize strip reduce nolines

test:5 r1 (1#1) 
sequences:182 r8 (2#2) 
sequences:183 r19 (3#3) r8 r1
sequences:183 r29 (3#4) r19 r1
sequences:183 r38 (3#5) r29 r1
test:11 <sig> r38: seq(handle(h))
test:11 r44 (4#6) r38
test:11 <sig> r44: seq(handle(h))
test:11 <sig> r38: seq(handle(h)) ; r44: seq(handle(h))
test:8  (5#7) r44

>> generate strip

opcode 999, r1
r2 <- []
opcode 4, r2, r1
opcode 4, r2, r1
opcode 4, r2, r1
opcode 997, r1, r2
opcode 998, r1

>> test

>> input

program "test" "test" 1;

world code code_gen() -> handle(h) { impl() -> r1: handle(h) { opcode 999, r1; } }
function gen() { let y = code_gen(); y }

world code code_gen2() -> handle(h2) { impl() -> r1: handle(h2) { opcode 998, r1; } }
function gen2() { let y = code_gen2(); y }

procedure cmp(a: ?X, b: ?X) { print(format([a,b])); }

let a = gen();
let b = gen2();
cmp(a,b);

>> narrow-fail strip

cannot deduce type/B at sequences:183 (called from test:10) (called from test:14)
