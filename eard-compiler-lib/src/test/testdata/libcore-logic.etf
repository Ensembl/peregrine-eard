>> test

finite sequences

>> input

program "test" "test" 1;

let a = [1,2,3];
print(format(a));

>> constfold strip culdesac nolines

sequences:47 r31 <- [1,2,3]
print:5 r41 (1#5) r31
print:11  (2#6) r41

>> test

empty sequence

>> input

program "test" "test" 1;

print(format([]));

>> constfold strip culdesac nolines

sequences:46 r1 <- []
print:5 r9 (1#2) r1
print:11  (2#3) r9

>> test

infinite sequence

>> input

program "test" "test" 1;

print(format([true,...]));

>> constfold strip culdesac nolines

sequences:45 r4 <- [true,...]
print:5 r10 (1#2) r4
print:11  (2#3) r10

>> test

sane error messages

>> input

program "test" "test" 1;

print(format("hi"+3));

>> broad-fail strip

could not find appropriate implementation for [string, number] at arith:255 (called from test:4)

>> test

relate fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

c(4>3);
c(3>4);
c(3>=3);
c(3>=4);
c(4<3);
c(3<4);
c(3<=3);
c(3<=4);
c([3,4,5]>4);
c([3,4,5]>=4);

>> generate strip

r1 <- true
opcode 999, r0, r1
r2 <- false
opcode 999, r0, r2
opcode 999, r0, r1
opcode 999, r0, r2
opcode 999, r0, r2
opcode 999, r0, r1
opcode 999, r0, r1
opcode 999, r0, r1
r2 <- [false,false,true]
opcode 999, r0, r2
r1 <- [false,true,true]
opcode 999, r0, r1

>> test

relate no-fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let a = c(3);
let b = c(4);

c(b>a);
c(a>b);
c(a>=a);
c(a>=b);
c(b<a);
c(a<b);
c(a<=a);
c(a<=b);

>> generate strip comments

r1 <- 3
opcode 999, r2, r1
opcode 27, r1, r2, r2
opcode 27, r3, r2, r2
r4 <- 4
opcode 999, r5, r4
  # r1, r3 = a>=a ; r2 = c(3) = a ; r5 = c(4) = b
opcode 27, r4, r5, r2
opcode 26, r6, r5, r2
opcode 26, r7, r2, r5
  # r4 = b>=a; r6 = b>a ; r7 = a>b
opcode 27, r8, r2, r5
opcode 26, r9, r2, r5
opcode 26, r10, r5, r2
  # r8 = a>=b ; r9 = a>b ; r10 = b>a
opcode 999, r0, r10
opcode 999, r0, r9
opcode 999, r0, r3
opcode 999, r0, r8
opcode 999, r0, r7
opcode 999, r0, r6
opcode 999, r0, r1
opcode 999, r0, r4

>> test

relate no-fold seq

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let a = c([3]);
let b = c([4]);

c(b>a);
c(a>b);
c(a>=a);
c(a>=b);
c(b<a);
c(a<b);
c(a<=a);
c(a<=b);

>> generate strip comments

r1 <- [3]
opcode 999, r2, r1
opcode 59, r1, r2, r2
opcode 59, r3, r2, r2
r4 <- [4]
opcode 999, r5, r4
opcode 59, r4, r5, r2
opcode 58, r6, r5, r2
opcode 58, r7, r2, r5
opcode 59, r8, r2, r5
opcode 58, r9, r2, r5
opcode 58, r10, r5, r2
opcode 999, r0, r10
opcode 999, r0, r9
opcode 999, r0, r3
opcode 999, r0, r8
opcode 999, r0, r7
opcode 999, r0, r6
opcode 999, r0, r1
opcode 999, r0, r4

>> test

relate no-fold seq/no-seq

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let a = c(3);
let b = c([4]);

c(b>a);
c(a>b);
c(a>=a);
c(a>=b);
c(b<a);
c(a<b);
c(a<=a);
c(a<=b);

>> generate strip comments

r1 <- 3
opcode 999, r2, r1
opcode 27, r1, r2, r2
opcode 27, r3, r2, r2
r4 <- [4]
opcode 999, r5, r4
opcode 49, r4, r5, r2
opcode 48, r6, r5, r2
opcode 48, r7, r5, r2
opcode 49, r8, r5, r2
opcode 48, r9, r5, r2
opcode 48, r10, r5, r2
opcode 999, r0, r10
opcode 999, r0, r9
opcode 999, r0, r3
opcode 999, r0, r8
opcode 999, r0, r7
opcode 999, r0, r6
opcode 999, r0, r1
opcode 999, r0, r4

>> test

not fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

c(!true);
c(!false);
c(![true,false,true]);
c(![true,...]);

>> generate strip

r1 <- false
opcode 999, r0, r1
r1 <- true
opcode 999, r0, r1
r1 <- [false,true,false]
opcode 999, r0, r1
r1 <- [false,...]
opcode 999, r0, r1

>> test

not modify

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let t = c(true);
let f = c(false);

c(!t);
c(!f);
c(![t,f,t]);
c(![t,...]);

>> generate strip

r1 <- true
opcode 999, r2, r1
opcode 51, r1, r2
opcode 40, r1
r3 <- []
opcode 54, r3, r2
r4 <- false
opcode 999, r5, r4
opcode 54, r3, r5
opcode 54, r3, r2
opcode 29, r2
opcode 29, r5
opcode 999, r0, r2
opcode 999, r0, r5
opcode 40, r3
opcode 999, r0, r3
opcode 999, r0, r1

>> test

not no modify

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let t = c(true);
let f = c(false);
let x = [t,f,t];

c(!t);
c(!f);
c(!x);
c(![t,...]);
c(t);
c(f);
c(x);

>> generate strip comments

r1 <- true
opcode 999, r2, r1
opcode 51, r1, r2
opcode 40, r1
opcode 28, r3, r2
r4 <- []
opcode 54, r4, r2
r5 <- false
opcode 999, r6, r5
opcode 54, r4, r6
opcode 54, r4, r2
opcode 28, r5, r6
opcode 999, r0, r3
opcode 999, r0, r5
opcode 39, r3, r4
opcode 999, r0, r3
opcode 999, r0, r1
opcode 999, r0, r2
opcode 999, r0, r6
opcode 999, r0, r4

>> test

equal fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { 
  impl(r1: number) -> r2: number { opcode 999, r2, r1; }
  impl(r1: string) -> r2: string { opcode 999, r2, r1; }
  impl(r1: boolean) -> r2: boolean { opcode 999, r2, r1; }
  impl(r1: seq(boolean)) -> r2: seq(boolean) { opcode 999, r2, r1; }
}
function c(x) { let y = wc(x); y }

c(1==1);
c(1==2);
c(1!=1);
c(1!=2);
c([1,...]==1);
c([1,...]==2);
c([1,...]!=1);
c([1,...]!=2);
c([1,...]==[1]);
c([1,...]==[2]);
c([1,...]!=[1]);
c([1,...]!=[2]);
c([1,...]==[1,...]);
c([1,...]==[2,...]);
c([1,...]!=[1,...]);
c([1,...]!=[2,...]);
c([1]==[1]);
c([1]==[2]);
c([1]!=[1]);
c([1]!=[2]);

>> generate strip

r1 <- true
opcode 999, r0, r1
r2 <- false
opcode 999, r0, r2
opcode 999, r0, r2
opcode 999, r0, r1
r2 <- [true,...]
opcode 999, r0, r2
r1 <- [false,...]
opcode 999, r0, r1
opcode 999, r0, r1
opcode 999, r0, r2
r1 <- [true]
opcode 999, r0, r1
r2 <- [false]
opcode 999, r0, r2
opcode 999, r0, r2
opcode 999, r0, r1
r2 <- [true,...]
opcode 999, r0, r2
r3 <- [false,...]
opcode 999, r0, r3
opcode 999, r0, r3
opcode 999, r0, r2
opcode 999, r0, r1
r3 <- [false]
opcode 999, r0, r3
opcode 999, r0, r3
opcode 999, r0, r1

>> test

equal no fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

procedure x(a,ai,af,b,bi,bf) {
  c(a==b);
  c(ai==b);
  c(ai==bf);
  c(ai==bi);
  c(af==bf);
}

let a = "a";
let b = "b";
x(c(a),c([a,...]),c([a]),c(b),c([b,...]),c([b]));

let a = true;
let b = false;
x(c(a),c([a,...]),c([a]),c(b),c([b,...]),c([b]));

let a = 1;
let b = 2;
x(c(a),c([a,...]),c([a]),c(b),c([b,...]),c([b]));

>> generate strip

r1 <- "a"
opcode 999, r2, r1
r1 <- ["a",...]
opcode 999, r3, r1
r1 <- ["a"]
opcode 999, r4, r1
r1 <- "b"
opcode 999, r5, r1
opcode 34, r1, r3, r5
opcode 31, r6, r2, r5
r2 <- ["b",...]
opcode 999, r5, r2
opcode 37, r2, r3, r5
r5 <- ["b"]
opcode 999, r7, r5
opcode 37, r5, r4, r7
opcode 37, r4, r3, r7
opcode 999, r0, r6
opcode 999, r0, r1
opcode 999, r0, r4
opcode 999, r0, r2
opcode 999, r0, r5
r1 <- true
opcode 999, r2, r1
r3 <- [true,...]
opcode 999, r4, r3
r5 <- [true]
opcode 999, r6, r5
r7 <- false
opcode 999, r1, r7
opcode 35, r7, r4, r1
opcode 32, r5, r2, r1
r1 <- [false,...]
opcode 999, r2, r1
opcode 38, r1, r4, r2
r2 <- [false]
opcode 999, r3, r2
opcode 38, r2, r6, r3
opcode 38, r6, r4, r3
opcode 999, r0, r5
opcode 999, r0, r7
opcode 999, r0, r6
opcode 999, r0, r1
opcode 999, r0, r2
r1 <- 1
opcode 999, r2, r1
r3 <- [1,...]
opcode 999, r4, r3
r5 <- [1]
opcode 999, r6, r5
r7 <- 2
opcode 999, r1, r7
opcode 33, r7, r4, r1
opcode 30, r5, r2, r1
r1 <- [2,...]
opcode 999, r2, r1
opcode 36, r3, r4, r2
r2 <- [2]
opcode 999, r1, r2
opcode 36, r2, r6, r1
opcode 36, r6, r4, r1
opcode 999, r0, r5
opcode 999, r0, r7
opcode 999, r0, r6
opcode 999, r0, r3
opcode 999, r0, r2

>> test

and/or fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

c(true&&false);
c(true||false);
c([true]&&false);
c([true]||false);
c(true&&[false]);
c(true||[false]);
c([true]&&[false]);
c([true]||[false]);

>> generate strip

r1 <- false
opcode 999, r0, r1
r1 <- true
opcode 999, r0, r1
r1 <- [false]
opcode 999, r0, r1
r2 <- [true]
opcode 999, r0, r2
opcode 999, r0, r1
opcode 999, r0, r2
opcode 999, r0, r1
opcode 999, r0, r2

>> test

and/or no fold no modify

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let t = c(true);
let f = c(false);
let ts = c([true]);
let fs = c([false]);

c(t&&f);
c(t||f);
c(ts&&f);
c(ts||f);
c(t&&fs);
c(t||fs);
c(ts&&fs);
c(ts||fs);
c(t);
c(ts);
c(f);
c(fs);

>> generate strip

r1 <- true
opcode 999, r2, r1
r1 <- false
opcode 999, r3, r1
opcode 86, r1, r2, r3
opcode 80, r4, r2, r3
r5 <- [true]
opcode 999, r6, r5
r5 <- [false]
opcode 999, r7, r5
opcode 82, r5, r7, r2
opcode 88, r8, r7, r2
opcode 88, r9, r6, r3
opcode 82, r10, r6, r3
opcode 84, r11, r6, r7
opcode 90, r12, r6, r7
opcode 999, r0, r4
opcode 999, r0, r1
opcode 999, r0, r10
opcode 999, r0, r9
opcode 999, r0, r5
opcode 999, r0, r8
opcode 999, r0, r11
opcode 999, r0, r12
opcode 999, r0, r2
opcode 999, r0, r6
opcode 999, r0, r3
opcode 999, r0, r7

>> test

and/or no fold modify

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let t = c(true);
let f = c(false);
let ts = c([true]);
let fs = c([false]);

c(c(true)&&c(false));
c(c(true)||c(false));
c(c([true])&&c(false));
c(c([true])||c(false));
c(c(true)&&c([false]));
c(c(true)||c([false]));
c(c([true])&&c([false]));
c(c([true])||c([false]));

>> generate strip

r1 <- true
opcode 999, r0, r1
r1 <- false
opcode 999, r0, r1
r2 <- [true]
opcode 999, r0, r2
r2 <- [false]
opcode 999, r0, r2
r2 <- true
opcode 999, r3, r2
opcode 999, r4, r1
opcode 81, r3, r4
opcode 999, r0, r3
opcode 999, r3, r2
opcode 999, r4, r1
opcode 87, r3, r4
opcode 999, r0, r3
r3 <- [true]
opcode 999, r4, r3
opcode 999, r2, r1
opcode 83, r4, r2
opcode 999, r0, r4
opcode 999, r2, r3
opcode 999, r4, r1
opcode 89, r2, r4
opcode 999, r0, r2
r2 <- true
opcode 999, r4, r2
r1 <- [false]
opcode 999, r3, r1
opcode 83, r3, r4
opcode 999, r0, r4
opcode 999, r3, r2
opcode 999, r4, r1
opcode 89, r4, r3
opcode 999, r0, r3
r3 <- [true]
opcode 999, r4, r3
opcode 999, r2, r1
opcode 85, r4, r2
opcode 999, r0, r4
opcode 999, r2, r3
opcode 999, r4, r1
opcode 91, r2, r4
opcode 999, r0, r2


>> test

if fold

>> input

program "test" "test" 1;

world code wc(?X) -> ?X { impl(r1: ?X) -> r2: ?X { opcode 999, r2, r1; } }
function c(x) { let y = wc(x); y }

let x = c(5);

c(if(true,1,x));
c(if(false,x,1));

>> generate strip

r1 <- 5
opcode 999, r0, r1
r1 <- 1
opcode 999, r0, r1
opcode 999, r0, r1
