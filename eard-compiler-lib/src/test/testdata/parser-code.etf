>> test

Code block smoke

>> input

world code test(seq(?X) length(?X), boolean length(?X)) -> (seq(boolean) ref(?X), boolean) {
    impl (r1: seq(number), r2: boolean) -> (r3: seq(boolean), r4: boolean) {
      opcode 44, r1, r2, r3, r4, r5;
    }

    impl (r1: seq(string), r2: boolean) -> (r3: seq(boolean), r4: boolean) {
      opcode 44, r1, r2, r3, r4, r5;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            world code test( seq(?X) length(X), boolean length(X))->(seq(boolean) ref(X), boolean) {
                impl (r1:seq(number), r2:boolean) -> (r3:seq(boolean), r4:boolean) {
                    opcode 44,r1,r2,r3,r4,r5;
                }
                impl (r1:seq(string), r2:boolean) -> (r3:seq(boolean), r4:boolean) {
                    opcode 44,r1,r2,r3,r4,r5;
                }
            }
        ),
        position: test:2,
        context:1
    }
]

>> test

Code wild types

>> input

code test(seq(?X)) -> (seq(?X)) {
    impl (r1: seq(?X)) -> (r2: seq(?X)) {
        opcode 42, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test (seq(?X)) -> (seq(?X)) {
                impl (r1:seq(?X)) -> (r2:seq(?X)) {
                    opcode 42,r1,r2;
                }
            }
        ),
        position: test:2,
        context: 1
    }
]

>> test

Code wild checks

>> input

code test1( seq(?X) length(?Y) ) -> (seq(?X) length(?Y), seq(boolean) ref(?Y)) {
    impl (r1: seq(?X)) -> (r2: seq(?X), r3: seq(boolean)) {
        opcode 42, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test1(seq(?X) length(Y))->(seq(?X) length(Y), seq(boolean) ref(Y)) {
                impl (r1:seq(?X)) -> (r2:seq(?X), r3:seq(boolean)) {
                    opcode42,r1,r2;
                }
            }
        ),
        position: test:2,
        context: 1
    }
]

>> test

Code unbracketed return

>> input

code test(boolean) -> seq(boolean) {
    impl (r1: boolean) -> r2: seq(boolean) {
        opcode 42, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test(boolean)-> (seq(boolean)) {
                impl (r1:boolean) -> (r2:seq(boolean)) {
                    opcode 42,r1,r2;
                }
            }
        ),
        position: test:2,
        context: 1
    }
]

>> test

Code constants

>> input

code test_bool(boolean, boolean) {
    impl (r1:boolean, false) {
        opcode 42, r1, r2;
    }
}

code test_number(boolean, number) {
    impl (r1:boolean, 42) {
        opcode 42, r1, r2;
    }
}

code test_string(boolean, string) {
    impl (r1:boolean, "hello") {
        opcode 42, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test_bool(boolean,boolean) {
                impl (r1:boolean, false) {
                    opcode 42,r1,r2;
                }
            }
        ),
        position: test:2,
        context:1
    },
    PTStatement {
        value: Code(
            code test_number(boolean,number) {
                impl (r1:boolean,42) {
                    opcode 42,r1,r2;
                }
            }
        ),
        position: test:8,
        context: 1
    },
    PTStatement{
        value: Code(
            code test_string(boolean,string) {
                impl (r1:boolean,"hello") {
                    opcode42,r1,r2;
                }
            }
        ),
        position: test:14,
        context: 1
    }
]

>> test

Code checks no types

>> input

code test_string(r1) {
    opcode 42, r1, r2;
}

>> parse-fail strip

expected arg_type

>> test

Code no args, no return

>> input

code test_string() {
    impl () {
        opcode 42;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test_string() {
                impl () {
                    opcode42;
                }
            }
        ),
        position: test:2,
        context: 1
    }
]

>> test

code & impl args differ 1

>> input

code test(number,number) -> boolean {
    impl (r1: number) -> r2: number {}
}

>> parse-fail strip

mismatch in arg list between code block and impl

>> test

code & impl args differ 2

>> input

code test(number,number) -> boolean {
    impl (r1: number, r2: number) {}
}

>> parse-fail strip

mismatch in return list between code block and impl
