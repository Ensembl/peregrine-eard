>> test

Function parsing smoke

>> input

export function first(a: seq(?X)) -> ?X {
    print("getting first element");
    entry(a,0)
}

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "first",
            modifiers: [Export],
            args: [
                a: seq(?X)
            ],
            captures: [],
            block: [
                PTStatement {
                    value: BareCall(PTCall{
                        name: "print",
                        args: [
                            Constant("gettingfirstelement")
                        ],
                        is_macro: false
                    }),
                    position: test:3,
                    context: 1
                }
            ],
            value: Call(PTCall{
                name: "entry",
                args: [
                    Variable(a),
                    Constant(0)
                ],
                is_macro: false
            }),
            value_type: Some(?X)
        }),
        position: test:2,
        context: 1
    }
]

>> test

Christmas tree argument specs function

>> input

function test(a: seq(number)|number|boolean length(?X) ref(?Y), b: seq(?Z)) -> seq(?Z) ref(?X) {
    42
}

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "test",
            modifiers: [],
            args: [
                a: seq(number)|number|boolean length(X) ref(Y),
                b: seq(?Z)
            ],
            captures: [],
            block: [],
            value: Constant(42),
            value_type: Some(seq(?Z) ref(X))
        }),
        position: test:2,
        context: 1
    }
]

>> test

Empty functions not allowed

>> input

function test(a: seq(number)|number|boolean length(?X) ref(?Y), b: seq(?Z)) -> seq(?Z) ref(?X) {
}

>> parse-fail strip

expected function_value, capture_decl, or inner_block

>> test

Functions, no types.

>> input

function inc(a) {
    a+1
}

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "inc",
            modifiers: [],
            args: [a],
            captures: [],
            block: [],
            value: Infix(Variable(a),"+",Constant(1)),
            value_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Functions, no return.

>> input

function more(a: number length(?X)) {
    3
}

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "more",
            modifiers: [],
            args: [
                a: number length(X)
            ],
            captures: [],
            block: [],
            value: Constant(3),
            value_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Functions, bundle pass and return.

>> input

function func(*x) {
    inc(x.a);
    *x
}

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "func",
            modifiers: [],
            args: [*x],
            captures: [],
            block: [
                PTStatement {
                    value: BareCall(PTCall{
                        name: "inc",
                        args: [Variable(x.a)],
                        is_macro:false
                    }),
                    position: test:3,
                    context: 1
                }
            ],
            value: *x,
            value_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Functions, no args.

>> input

function x() { 42 }

>> parse strip

[
    PTStatement {
        value: FuncDef(PTFuncDef{
            name: "x",
            modifiers: [],
            args: [],
            captures: [],
            block: [],
            value: Constant(42),
            value_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Procedures, multi return

>> input

procedure x(a: number, b: number) -> (number,number) {
    print(a);
    print(b);
    (b,a)
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a: number,
                b: number
            ],
            captures: [],
            block:[
                PTStatement{
                    value:BareCall(PTCall{name:"print",args:[Variable(a)],is_macro:false}),
                    position: test:3,
                    context:1
                },
                PTStatement{
                    value:BareCall(PTCall{name:"print",args:[Variable(b)],is_macro:false}),
                    position: test:4,
                    context:1
                }
            ],
            ret: [Variable(b),Variable(a)],
            ret_type: Some([
                number,
                number
            ])
        }),
        position: test:2,
        context:1
    }
]

>> test

Functions, no multi return

>> input

function x(a: number, b: number) -> (number,number) {
    a+b
}

>> parse-fail strip

expected arg_type or arg_check

>> test

Procedures, single return, bracketed.

>> input

procedure x(a: number, b: number) -> (number) {
    (a+b)
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a: number,
                b: number
            ],
            captures: [],
            block: [],
            ret: [
                Infix(Variable(a),"+",Variable(b))
            ],
            ret_type: Some([number])
        }),
        position: test:2,
        context: 1
    }
]

>> test

Procedures, single return, unbracketed.

>> input

procedure x(a: number, b: number) -> number {
    a+b
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a: number,
                b: number
            ],
            captures: [],
            block: [],
            ret: [
                Infix(Variable(a),"+",Variable(b))
            ],
            ret_type: Some([number])
        }),
        position: test:2,
        context: 1
    }
]

>> test

Procedures, empty allowed.

>> input

procedure x(a: number, b: number) {
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a: number,
                b: number
            ],
            captures: [],
            block: [],
            ret: [],
            ret_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Procedures, no types but checks

>> input

procedure x(a, b: length(?X...)) {
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a,
                b: length(X...)
            ],
            captures: [],
            block: [],
            ret: [],
            ret_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Regression

>> input

funcion func(*x) -> *x {
    inc(x.a);
    *x
}

>> parse-fail strip

expected EOI or block

>> test

Procedures, no return

>> input

procedure x(a, b: length(?X...), *c) {
    c.x = 1;
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name:"x",
            modifiers:[],
            args:[
                a,
                b: length(X...),
                *c
            ],
            captures: [],
            block:[
                PTStatement{
                    value:ModifyStatement(
                        [c.x],
                        [Constant(1)]
                    ),
                    position: test:3,
                    context:1
                }
            ],
            ret: [],
            ret_type:None
        }),
        position: test:2,
        context:1
    }
]

>> test

Captures

>> input

let x = 2;
let y = 20;

procedure test(a) {
    capture x,y;

    x+y+1
}

>> parse strip

[
    PTStatement{
        value:LetStatement(
            [(x,[])],
            [Constant(2)]
        ),
        position: test:2,
        context:1
    },
    PTStatement{
        value:LetStatement(
            [(y,[])],
            [Constant(20)]
        ),
        position: test:3,
        context:1
    },
    PTStatement{
        value:ProcDef(PTProcDef{
            name:"test",
            modifiers:[],
            args:[a],
            captures:[x,y],
            block:[],
            ret:[
                Infix(
                    Infix(
                        Variable(x),
                        "+",
                        Variable(y)
                    ),
                    "+",
                    Constant(1)
                )
            ],
            ret_type:None
        }),
        position: test:5,
        context:1
    }
]

>> test

Procedures, bundle return

>> input

procedure x(a, b: length(?X...), *c) {
    c.x = 1;
    *c
}

>> parse strip

[
    PTStatement {
        value: ProcDef(PTProcDef{
            name: "x",
            modifiers: [],
            args: [
                a,
                b: length(X...),
                *c
            ],
            captures: [],
            block: [
                PTStatement {
                    value: ModifyStatement(
                        [c.x],
                        [Constant(1)]
                    ),
                    position: test:3,
                    context: 1
                }
            ],
            ret: [*c],
            ret_type: None
        }),
        position: test:2,
        context: 1
    }
]

>> test

Procedure return (let)

>> input

let (x : length(w) total(ww),y,z) = c(a,b,c);

>> parse strip

[
    PTStatement{
        value: LetStatement([
            (x,[length(w),total(ww)]),
            (y,[]),
            (z,[])
        ],
        [
            Call(PTCall{
                name:"c",
                args:[
                    Variable(a),
                    Variable(b),
                    Variable(c)
                ],
                is_macro:false
            })
        ]
    ),
    position: test:2,
    context:1
    }
]

>> test

Procedure return (modify)

>> input

(x,y,z) = c(a,b,c);

>> parse strip

[
    PTStatement{value:ModifyStatement(
        [x,y,z],
        [
            Call(PTCall{
                name: "c",
                args:[
                    Variable(a),
                    Variable(b),
                    Variable(c)
                ],
                is_macro:false
            })
        ]
    ),
    position: test:2,
    context:1}
]

>> test

argument passing smoke

>> input

procedure print(a) { 0 }
function f1(*a) { print(a.c); 0 }

let a.a = 1;
let a.b = 2;
let a.c = 3;
f1(*a);
print(a.a);

>> built strip

0:proc (a) {
  (0)
}

1:func (*a) {
  test:3 (0#1 a.c)
  (0)
}

test:2 define 0
test:3 define 1
test:5 (r1) <- #2 1
test:5 let a.a
test:5 (a.a) <- #3 r1
test:6 (r2) <- #4 2
test:6 let a.b
test:6 (a.b) <- #5 r2
test:7 (r3) <- #6 3
test:7 let a.c
test:7 (a.c) <- #7 r3
test:8 #9 (1#8 *a)
test:9 (0#10 a.a)

>> unbundle trim

9,8/Arg(0): c
