>> test

reust smoke test

>> input

program "test" "test" 1;

code c(number, number, number) -> number {
    impl (r1: number, r2: number, r3: number) -> r3: number {}
}

world code wc(?X) -> ?X {
    impl (r1: ?X) -> r1 {}
}

function f(x,y,z) { let a = c(x,y,z); a }
function wf(x) { let a = wc(x); a }

let a = f(1,2,3);
let b = f(1,2,3);
let c = f(a,b,a);
let d = f(a,b,a);
let e = wf(c);
let f = wf(d);
print(format(c));
print(format(d));
print(format(e));
print(format(f));

>> constfold strip culdesac nolines

test:13 r1 <- 1
test:13 r2 <- 2
test:13 r3 <- 3
test:10 r10 (1#1) r1 r2 r3
test:14 r17 <- 1
test:14 r18 <- 2
test:14 r19 <- 3
test:10 r26 (1#2) r17 r18 r19
test:10 r41 (1#3) r10 r26 r10
test:10 r56 (1#4) r10 r26 r10
test:11 r65 (2#5) r41
test:11 r75 (2#6) r56
print:7 r84 (3#7) r41
print:15  (4#8) r84
print:7 r93 (3#9) r56
print:15  (4#10) r93
print:7 r101 (3#11) r65
print:15  (4#12) r101
print:7 r109 (3#13) r75
print:15  (4#14) r109

>> reuse strip nolines

test:13 r1 <- 1
test:13 r2 <- 2
test:13 r3 <- 3
test:10 r10 (1#1) r1 r2 r3
test:10 r41 (1#3) r10 r10 r10
test:11 r65 (2#5) r41
test:11 r75 (2#6) r41
print:5 r84 (3#7) r41
print:11  (4#8) r84
print:11  (4#10) r84
print:5 r101 (3#11) r65
print:11  (4#12) r101
print:5 r109 (3#13) r75
print:11  (4#14) r109

>> reuse-known strip

1: 1
2: 2
3: 3
10: 1/0(1, 2, 3)
41: 1/0(1/0(1, 2, 3), 1/0(1, 2, 3), 1/0(1, 2, 3))
84: 2/0(1/0(1/0(1, 2, 3), 1/0(1, 2, 3), 1/0(1, 2, 3)))

>> test

reust smoke test 2

>> input

program "test" "test" 1;

code c(number, number, number) -> number {
    impl (r1: number, r2: number, r3: number) -> r3: number {}
}

code pc(number, number) -> (number,number) {
    impl (r1: number, r2: number) -> (r3: number, r4: number) {}
}

world code wc(?X) -> ?X {
    impl (r1: ?X) -> r1 {}
}

procedure p(a,b) { let (a,b) = pc(a,b); (b,a) }
function f(x,y,z) { let a = c(x,y,z); a }
function wf(x) { let a = wc(x); a }

let a = f(1,2,3);
let b = f(1,2,3);
let c = f(1,2,0);
let (d,e) = p(a,b);
let (f,g) = p(b,a);
print(format(a));
print(format(b));
print(format(c));
print(format(d));
print(format(e));
print(format(f));
print(format(g));

>> reuse strip nolines

test:18 r1 <- 1
test:18 r2 <- 2
test:18 r3 <- 3
test:15 r10 (1#1) r1 r2 r3
test:20 r34 <- 0
test:15 r41 (1#3) r1 r2 r34
test:14 r53 r54 (2#4) r10 r10
print:5 r88 (3#6) r10
print:11  (4#7) r88
print:11  (4#9) r88
print:5 r105 (3#10) r41
print:11  (4#11) r105
print:5 r113 (3#12) r54
print:11  (4#13) r113
print:5 r121 (3#14) r53
print:11  (4#15) r121
print:11  (4#17) r113
print:11  (4#19) r121

>> reuse-known strip

1: 1
2: 2
3: 3
10: 1/0(1, 2, 3)
34: 0
41: 1/0(1, 2, 0)
53: 2/0(1/0(1, 2, 3), 1/0(1, 2, 3))
54: 2/1(1/0(1, 2, 3), 1/0(1, 2, 3))
88: 3/0(1/0(1, 2, 3))
105: 3/0(1/0(1, 2, 0))
113: 3/0(2/1(1/0(1, 2, 3), 1/0(1, 2, 3)))
121: 3/0(2/0(1/0(1, 2, 3), 1/0(1, 2, 3)))

>> test

reorder smoke test

>> input

program "test" "test" 1;

code c(number, number, number) -> number {
    impl (r1: number, r2: number, 0) -> r1 {}
    impl (r1: number, r2: number, r3: number) -> r3: number {}
}

function f(x,y,z) { let a = c(x,y,z); a }

let g = f(1,1,1);
let a = 3;
let f = f(g,5,0);
let b = format(f(a,2,0));
let c = format(f(a,f,g));
print(b);
let d = format(f(a,f,3));
print(c);
print(d);

>> constfold strip culdesac nolines

test:9 r1 <- 1
test:9 r2 <- 1
test:9 r3 <- 1
test:7 r10 (1#1) r1 r2 r3
test:10 r17 <- 3
test:11 r22 <- 5
test:11 r23 <- 0
test:7 r30 (1#2) r10 r22 r23
test:12 r37 <- 2
test:12 r38 <- 0
test:7 r45 (1#3) r17 r37 r38
print:5 r50 (2#4) r45
test:7 r66 (1#5) r17 r30 r10
print:5 r71 (2#6) r66
print:11  (3#7) r50
test:15 r82 <- 3
test:7 r89 (1#8) r17 r30 r82
print:5 r94 (2#9) r89
print:11  (3#10) r71
print:11  (3#11) r94

>> reordered strip nolines

test:9 r1 <- 1
test:7 r10 (1#1) r1 r1 r1
test:10 r17 <- 3
test:11 r22 <- 5
test:11 r23 <- 0
test:7 r30 (1#2) r10 r22 r23
test:7 r66 (1#5) r17 r30 r10
test:7 r89 (1#8) r17 r30 r17
print:5 r94 (2#9) r89
print:5 r71 (2#6) r66
test:12 r37 <- 2
test:7 r45 (1#3) r17 r37 r23
print:5 r50 (2#4) r45
print:11  (3#7) r50
print:11  (3#10) r71
print:11  (3#11) r94

>> test

spill smoke

>> input

program "test" "test" 1;

world code c() {
    impl () {}
}

world code use(number) {
    impl (r1: number) {}
}


procedure pause() { c(); c(); c(); c(); c(); c(); c(); c(); c(); }

let a = 1;
use(a);
use(a);
pause();
use(a);
use(a);
pause();
use(a);
use(a);

>> spill strip nolines

test:13 r1 <- 1
test:14  (1#1) r1
test:15  (1#2) r1
test:11  (2#3) 
test:11  (2#4) 
test:11  (2#5) 
test:11  (2#6) 
test:11  (2#7) 
test:11  (2#8) 
test:11  (2#9) 
test:11  (2#10) 
test:11  (2#11) 
test:17 r11 <- 1
test:17  (1#12) r11
test:18  (1#13) r11
test:11  (2#14) 
test:11  (2#15) 
test:11  (2#16) 
test:11  (2#17) 
test:11  (2#18) 
test:11  (2#19) 
test:11  (2#20) 
test:11  (2#21) 
test:11  (2#22) 
test:20 r12 <- 1
test:20  (1#23) r12
test:21  (1#24) r12
