>> test

checking length smoke

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!a) = c([3,4]);

>> generate strip

r1 <- [1,2]
r1 <- [3,4]

>> test

checking total smoke

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : total(!a) = c([7,3]);
let b : total(!a) = c([9,1]);
let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);

>> generate strip

r1 <- [7,3]
r1 <- [9,1]
r1 <- [0,1,2,3,4,5,6,7,8,9]

>> test

checking length then total/bound

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);
let a : total(!a) = c([7,3]);
let b : ref(!a) = c([9,1]);

>> generate strip

r1 <- [0,1,2,3,4,5,6,7,8,9]
r1 <- [7,3]
r1 <- [9,1]

>> test

checking or-inf

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a...) = c([1,2,3]);
let b : length(!a...) = c([4,...]);
let c : length(!a) = c([5,6,7]);

>> generate strip

r1 <- [1,2,3]
r1 <- [4,...]
r1 <- [5,6,7]

>> test

checking collapse only one

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!b) = c([3,4]);

>> generate strip

r1 <- [1,2]
r1 <- [3,4]
