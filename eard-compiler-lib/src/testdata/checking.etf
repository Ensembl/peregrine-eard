>> test

length works

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_length([])));
print(format(__test_length([1])));
print(format(__test_length([1,2])));
print(format(__test_length([1,...])));
print(format(__test_length(c([]))));

>> generate strip

r1 <- 0
opcode 9, r2, r1
opcode 8, r2
r2 <- 1
opcode 9, r1, r2
opcode 8, r1
r1 <- 2
opcode 9, r2, r1
opcode 8, r2
r2 <- -1
opcode 9, r1, r2
opcode 8, r1
r1 <- []
opcode 5, r2, r1
opcode 9, r1, r2
opcode 8, r1

>> test

total works

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_total([])));
print(format(__test_total([1])));
print(format(__test_total([1,2])));
print(format(__test_total(c([1,2]))));
print(format(__test_total([1,...])));
print(format(__test_total([1.3,2])));

>> generate strip

r1 <- 0
opcode 9, r2, r1
opcode 8, r2
r2 <- 1
opcode 9, r1, r2
opcode 8, r1
r1 <- 3
opcode 9, r2, r1
opcode 8, r2
r2 <- [1,2]
opcode 6, r1, r2
opcode 9, r2, r1
opcode 8, r2
r1 <- [1,...]
opcode 6, r2, r1
opcode 9, r1, r2
opcode 8, r1
r1 <- -1
opcode 9, r2, r1
opcode 8, r2

>> test

bound works

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

print(format(__test_bound([])));
print(format(__test_bound([1])));
print(format(__test_bound([1,7,3])));
print(format(__test_bound(c([1,2]))));
print(format(__test_bound([1,...])));
print(format(__test_bound([1.3,2])));

>> generate strip

r1 <- 0
opcode 9, r2, r1
opcode 8, r2
r2 <- 1
opcode 9, r1, r2
opcode 8, r1
r1 <- 7
opcode 9, r2, r1
opcode 8, r2
r2 <- [1,2]
opcode 7, r1, r2
opcode 9, r2, r1
opcode 8, r2
r1 <- [1,...]
opcode 7, r2, r1
opcode 9, r1, r2
opcode 8, r1
r1 <- -1
opcode 9, r2, r1
opcode 8, r2

>> test

checking length smoke

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!a) = c([3,4]);

>> generate strip

r1 <- [1,2]
opcode 5, r2, r1
r1 <- [3,4]
opcode 5, r3, r1
r1 <- "a"
opcode 10, r1, r3, r2

>> test

checking total smoke

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : total(!a) = c([7,3]);
let b : total(!a) = c([9,1]);
let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);

>> generate strip

r1 <- [7,3]
opcode 6, r2, r1
r1 <- [9,1]
opcode 6, r3, r1
r1 <- "a"
opcode 11, r1, r3, r2
r3 <- [0,1,2,3,4,5,6,7,8,9]
opcode 5, r4, r3
opcode 13, r1, r4, r2

>> test

checking length then total/bound

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let x : length(!a) = c([0,1,2,3,4,5,6,7,8,9]);
let a : total(!a) = c([7,3]);
let b : ref(!a) = c([9,1]);

>> generate strip

r1 <- [0,1,2,3,4,5,6,7,8,9]
opcode 5, r2, r1
r1 <- [7,3]
opcode 6, r3, r1
r1 <- "a"
opcode 13, r1, r2, r3
r3 <- [9,1]
opcode 7, r4, r3
opcode 14, r1, r2, r4

>> test

checking or-inf

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a...) = c([1,2,3]);
let b : length(!a...) = c([4,...]);
let c : length(!a) = c([5,6,7]);

>> generate strip

r1 <- [1,2,3]
opcode 5, r2, r1
r1 <- [4,...]
opcode 5, r3, r1
r1 <- "a"
opcode 15, r1, r2, r3
r3 <- [5,6,7]
opcode 5, r4, r3
opcode 16, r1, r4, r2

>> test

checking collapse only one

>> input

world code wc(?X) -> ?X { impl(r1: ?X) -> r1 {} }
function c(x) { let y = wc(x); y }

let a : length(!a) = c([1,2]);
let b : length(!b) = c([3,4]);

>> generate strip

r1 <- [1,2]
r1 <- [3,4]
