>> test

generate smoke test 1

>> input

world code wc(number,number,number) -> (number,number) {
    impl (r1: number, r2: number, r3: number) -> (r4: number, r5:number) {
        opcode 100, r4, r5, r1, r2, r3;
    }
}

procedure wf(a,b,c) { let (x,y) = wc(a,b,c); (x,y) }

wf(1,2,3);
wf(4,5,6);

>> reuse strip

test:10 r1 <- 1
test:10 r2 <- 2
test:10 r3 <- 3
test:8 r0 r0 (1#1) r1 r2 r3
test:11 r18 <- 4
test:11 r19 <- 5
test:11 r20 <- 6
test:8 r0 r0 (1#2) r18 r19 r20

>> generate strip

r1 <- 1
r2 <- 2
r3 <- 3
opcode 100, r0, r0, r1, r2, r3
r1 <- 4
r2 <- 5
r3 <- 6
opcode 100, r0, r0, r1, r2, r3

>> test

generate smoke test 2

>> input

world code wc(number,number,number) -> (number,number) {
    impl (r1: number, r2: number, r3: number) -> (r4: number, r5:number) {
        opcode 100, r4, r5, r1, r2, r3;
    }
}

procedure wf(a,b,c) { let (x,y) = wc(a,b,c); (x,y) }

let (a,b) = wf(1,2,3);
wf(1,5,a);

>> generate strip

r1 <- 1
r2 <- 2
r3 <- 3
opcode 100, r4, r0, r1, r2, r3
r2 <- 5
opcode 100, r0, r0, r1, r2, r4

>> test

generate smoke impl choice

>> input

world code fc(number,number) -> number {
    impl (0,r1: number) -> r1 {}

    impl (r1: number,0) -> r1 {}

    impl (1, r1:number) -> r1 {
        opcode 1002, r1;
    }

    impl (r1:number, 1) -> r1 {
        opcode 1002, r1;
    }

    impl (r1: number, 1) -> (r2: number) {
        opcode 1001, r2, r1;
    }

    impl (r1: number, r2: number) -> (r3: number) {
        opcode 1000, r3, r1, r2;
    }
}

world code xc(number) { impl (r1: number) { opcode 999, r1; } }

function f(a,b) { let x = fc(a,b); x }
procedure x(x) { xc(x); }

x(f(2,2));
x(f(3,2));
x(f(2,1));
x(f(2,1));
x(f(2,0));
x(f(2,1));

>> reuse strip

test:29 r1 <- 2
test:26 r7 (1#1) r1 r1
test:27  (2#2) r7
test:30 r13 <- 3
test:26 r19 (1#3) r13 r1
test:27  (2#4) r19
test:31 r25 <- 1
test:26 r30 (1#5) r1 r25
test:27  (2#6) r30
test:26 r41 (1#7) r1 r25
test:27  (2#8) r41
test:33 r47 <- 0
test:26 r52 (1#9) r1 r47
test:27  (2#10) r52
test:26 r63 (1#11) r1 r25
test:27  (2#12) r63

>> generate strip

r1 <- 2
opcode 1000, r2, r1, r1
opcode 999, r2
r2 <- 3
opcode 1000, r3, r2, r1
opcode 999, r3
opcode 1001, r3, r1
opcode 999, r3
opcode 1001, r3, r1
opcode 999, r3
r3 <- 0
opcode 1000, r2, r1, r3
opcode 999, r2
opcode 1002, r1
opcode 999, r1

>> test

spill recovery

>> input

world code c() {
    impl () {}
}

world code use(number) {
    impl (r1: number) { opcode 999, r1; }
}

procedure pause() { c(); c(); c(); c(); c(); c(); c(); c(); c(); }

let a = 1;
use(a);
use(a);
pause();
use(a);
use(a);
pause();
use(a);
use(a);

>> spill strip

test:12 r1 <- 1
test:13  (1#1) r1
test:14  (1#2) r1
test:10  (2#3) 
test:10  (2#4) 
test:10  (2#5) 
test:10  (2#6) 
test:10  (2#7) 
test:10  (2#8) 
test:10  (2#9) 
test:10  (2#10) 
test:10  (2#11) 
test:16 r11 <- 1
test:16  (1#12) r11
test:17  (1#13) r11
test:10  (2#14) 
test:10  (2#15) 
test:10  (2#16) 
test:10  (2#17) 
test:10  (2#18) 
test:10  (2#19) 
test:10  (2#20) 
test:10  (2#21) 
test:10  (2#22) 
test:19 r12 <- 1
test:19  (1#23) r12
test:20  (1#24) r12

>> generate strip

r1 <- 1
opcode 999, r1
opcode 999, r1
opcode 999, r1
opcode 999, r1
opcode 999, r1
opcode 999, r1

>> test

libcore generate test

>> input

world code wuse(?X) -> ?X {
    impl (r1: ?X) -> r2: ?X { opcode 999, r2, r1; }
}

procedure use(x) { let y = wuse(x); y }

let a = use(1);
let b = use(2);
let c = 3;
let x = [a,b,c];
use(x);

>> generate strip

r1 <- 1
opcode 999, r2, r1
r1 <- 2
opcode 999, r3, r1
r1 <- []
opcode 4, r1, r2
opcode 4, r1, r3
r2 <- 3
opcode 4, r1, r2
opcode 999, r0, r1
