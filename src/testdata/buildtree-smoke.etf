>> test

Code blocks

>> input

world code test(r1: seq(number)|seq(string) length(?X), r2: boolean length(?X...)) -> (r3: seq(boolean) ref(?X), r5: boolean) {
    register r4;
    opcode 44, r1, r2, r3, r4, r5;
}

world code test(r1: seq(number)|seq(string) length(?X), r2: boolean length(?X...)) -> (r3: seq(boolean) ref(?X), r1) {
    register r4;
    opcode 45, r1, r2, r3, r4;
}

>> built strip skip-commas

0: code
            BTCodeDefinition {
                blocks: [
                    CodeBlock {
                        name: "test",
                        arguments: [
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 1,
                                    arg_types: [seq(number),seq(string)],
                                    checks: [length(X)]
                                },
                            ),
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 2,
                                    arg_types: [boolean],
                                    checks: [length(X...)]
                                },
                            ),
                        ],
                        results: [
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 3,
                                    arg_types: [seq(boolean)],
                                    checks: [ref(X)]
                                },
                            ),
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 5,
                                    arg_types: [boolean],
                                    checks: [],
                                },
                            ),
                        ],
                        commands: [
                            Register(
                                4,
                            ),
                            Opcode(
                                44,
                                [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                ],
                            ),
                        ],
                        modifiers: [
                            World,
                        ],
                    },
                    CodeBlock {
                        name: "test",
                        arguments: [
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 1,
                                    arg_types: [seq(number),seq(string)],
                                    checks: [length(X)]
                                },
                            ),
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 2,
                                    arg_types: [boolean],
                                    checks: [length(X...)]
                                },
                            ),
                        ],
                        results: [
                            Register(
                                CodeRegisterArgument {
                                    reg_id: 3,
                                    arg_types: [seq(boolean)],
                                    checks: [ref(X)]
                                },
                            ),
                            Repeat(
                                1,
                            ),
                        ],
                        commands: [
                            Register(
                                4,
                            ),
                            Opcode(
                                45,
                                [
                                    1,
                                    2,
                                    3,
                                    4,
                                ],
                            ),
                        ],
                        modifiers: [
                            World,
                        ],
                    },
                ],
            }
        

>> test

Let in PT->BT

>> input

function __operator_add(x,y) { /* dummy */ 0 }
function __operator_mul(x,y) { /* dummy */ 0 }

procedure test(x) { 
    let y = x+1;
    ( 42*x, 23*y )
}

let (a,b) = (1+1,2+2);
let (c,d) = test(6);
(c,d) = (d,c);

>> built strip

0:func (x,y) {
  (Number(0.0))
}

1:func (x,y) {
  (Number(0.0))
}

2:proc (x) {
  test:5 (r1) <- #2 (0#1 x Number(1.0))
  test:5 let y
  test:5 (y) <- #3 r1
  ((1#4 Number(42.0) x),(1#5 Number(23.0) y))
}

test:2 define 0
test:3 define 1
test:5 define 2
test:10 (r2) <- #7 (0#6 Number(1.0) Number(1.0))
test:10 (r3) <- #9 (0#8 Number(2.0) Number(2.0))
test:10 let a
test:10 let b
test:10 (a) <- #10 r2
test:10 (b) <- #11 r3
test:11 (r4 r5) <- (2#12 Number(6.0))
test:11 let c
test:11 let d
test:11 (c) <- #13 r4
test:11 (d) <- #14 r5
test:12 (r6) <- #15 d
test:12 (r7) <- #16 c
test:12 (c) <- #17 r6
test:12 (d) <- #18 r7

>> test

Simple PT->BT smoke test

>> input

function __operator_infseq(x) { /* dummy */ 0 }
function __operator_finseq(x) { /* dummy */ 0 }
procedure __operator_push(x) { /* dummy */ 0 }
function __operator_add(x,y) { /* dummy */ 0 }
function __operator_sub(x,y) { /* dummy */ 0 }
function __operator_mul(x,y) { /* dummy */ 0 }

procedure test(x) -> (number,number|seq(number) length(?X)) {
    ( 42*x, 23*x )
}

let x = 1;
let y = 2;
let z : length(y) = x+y;
test([z+1,...],[x-1,y+1]);
let (a,b) = test(6);

>> built strip

0:func (x) {
  (Number(0.0))
}

1:func (x) {
  (Number(0.0))
}

2:proc (x) {
  (Number(0.0))
}

3:func (x,y) {
  (Number(0.0))
}

4:func (x,y) {
  (Number(0.0))
}

5:func (x,y) {
  (Number(0.0))
}

6:proc (x) -> (number,number|seq(number) length(X)) {
  ((5#1 Number(42.0) x),(5#2 Number(23.0) x))
}

test:2 define 0
test:3 define 1
test:4 define 2
test:5 define 3
test:6 define 4
test:7 define 5
test:9 define 6
test:13 (r1) <- #3 Number(1.0)
test:13 let x
test:13 (x) <- #4 r1
test:14 (r2) <- #5 Number(2.0)
test:14 let y
test:14 (y) <- #6 r2
test:15 (r3) <- #8 (3#7 x y)
test:15 let z
test:15 (z) <- #9 r3
test:15 z <check> length(y)
test:16 (r4) <- (1#12)
test:16 (r4) <- (2#14 r4 (4#13 x Number(1.0)))
test:16 (r4) <- (2#16 r4 (3#15 y Number(1.0)))
test:16 (6#17 (0#11 (3#11 z Number(1.0))) r4)
test:17 (r5 r6) <- (6#18 Number(6.0))
test:17 let a
test:17 let b
test:17 (a) <- #19 r5
test:17 (b) <- #20 r6
