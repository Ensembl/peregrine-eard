>> test

bad repeater

>> input

function lookup(a,b) { 0 }
function x(a) { 0 }

let **tr_gn = lookup(x(gn),tr.gn);

>> test

bad repeater2

>> input

function lookup(a,b) { 0 }
function x(a) { 0 }

let **tr_gn = lookup(x(**gn),**gn);

>> test

bad bundle

>> input

procedure x() {
    let a.a = 1;
    let a.b = 2;
    *a
}

let a = x();

>> unbundle-fail strip

unexpected bundle return at test:8

>> test

bad bundle2

>> input

procedure x() { 0 }

let *a = x();

>> unbundle-fail strip

unexpected bundle return at test:4

>> test

good bundle

>> input

let a.a = 1;
let a.b = 2;
let *b = *a;

>> unbundle

>> test

good bundle proc

>> input

procedure x(*a,*b) {
    (*b,*a)
}

let a.a = 1;
let a.b = 2;

let (*c,*d) = x(*a,*a);

>> unbundle

>> test

bundle/repeat handling smoke test

>> input

function __operator_add(x,y) { /* dummy */ 0 }

let a.a = 2;
let d = 1;

function test2(x,*a,b) {
    x+a.a+b
}

procedure test1(*a) {
    capture *c, d;

    let **a = test2(**a,*c,d);
    *a
}

let a.a = 3;
let a.b = 6;

let *a = test1(*a);
let x = a.a+1;
let a.z = 42;

>> xunbundle

>> test

good repeater

>> input

function lookup(a,b) { 0 }

let **tr_gn = lookup(**gn,tr.gn);

>> xunbundle
