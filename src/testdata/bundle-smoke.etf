>> test

regression 2

0 = print
1 = thru [#8]
2 = drain [#10]

>> input

procedure print(a) { 0 }
procedure thru(*a) { *a }
procedure drain(*a) { print(a.c); }

let a.a = 1;
let a.b = 2;
let a.c = 3;
let *a = thru(*a);
drain(*a);

>> built strip

0:proc (a) {
  (0)
}

1:proc (*a) {
  (*a)
}

2:proc (*a) {
  test:4 (0#1 a.c)
  ()
}

test:2 define 0
test:3 define 1
test:4 define 2
test:6 (r1) <- #2 1
test:6 let a.a
test:6 (a.a) <- #3 r1
test:7 (r2) <- #4 2
test:7 let a.b
test:7 (a.b) <- #5 r2
test:8 (r3) <- #6 3
test:8 let a.c
test:8 (a.c) <- #7 r3
test:9 (*r4) <- (1#8 *a)
test:9 let *a
test:9 (*a) <- #9 *r4
test:10 (2#10 *a)

>> unbundle trim

8/Arg(0): c
8/Return(0): c
9/Return(0): c
10/Arg(0): c

>> test

regression 1

>> input

procedure print(a) { 0 }
function f(*a) { *a }
let x.a = 0;
let *x = f(*x);
print(x.a);

>> built strip

0:proc (a) {
  (0)
}

1:func (*a) {
  (*a)
}

test:2 define 0
test:3 define 1
test:4 (r1) <- #1 0
test:4 let x.a
test:4 (x.a) <- #2 r1
test:5 (*r2) <- #4 (1#3 *x)
test:5 let *x
test:5 (*x) <- #5 *r2
test:6 (0#6 x.a)

>> unbundle trim

4/Return(0): a
4,3/Arg(0): a
4,3/Return(0): a
5/Return(0): a

>> test

argument passing smoke

0 = print
1 = consumes_c
2 = generates_c
3 = p

10 = consumes_c
13 = generates_c
16 = consumes_c
17 = p

>> input

procedure print(a) { let x = a; 0 }
function consumes_c(*a) { print(a.c); 0 }

function generates_c() {
  let z.a = 1;
  let z.b = 2;
  let z.c = 3;
  *z
}

procedure p(*a) { let x = consumes_c(*a); x }

let *x = generates_c();
let y = p(consumes_c(*x));
print(x.a);

>> built strip

0:proc (a) {
  test:2 (r1) <- #1 a
  test:2 let x
  test:2 (x) <- #2 r1
  (0)
}

1:func (*a) {
  test:3 (0#3 a.c)
  (0)
}

2:func () {
  test:5 (r2) <- #4 1
  test:5 let z.a
  test:5 (z.a) <- #5 r2
  test:5 (r3) <- #6 2
  test:5 let z.b
  test:5 (z.b) <- #7 r3
  test:5 (r4) <- #8 3
  test:5 let z.c
  test:5 (z.c) <- #9 r4
  (*z)
}

3:proc (*a) {
  test:12 (r5) <- #11 (1#10 *a)
  test:12 let x
  test:12 (x) <- #12 r5
  (x)
}

test:2 define 0
test:3 define 1
test:5 define 2
test:12 define 3
test:14 (*r6) <- #14 (2#13)
test:14 let *x
test:14 (*x) <- #15 *r6
test:15 (r7) <- (3#17 (1#16 *x))
test:15 let y
test:15 (y) <- #18 r7
test:16 (0#19 x.a)

>> unbundle trim

14/Return(0): a c
14,13/Return(0): a c
15/Return(0): a c
17/Arg(0): c
17,11,10/Arg(0): c
17,16/Arg(0): c

>> test

argument passing return check smoke

5 = call to f1 from f2
6 = call to f2 from p
7 = call to p from top
8 = copy into x at top

7,6,5/r0 = a,b
7,6/r0 = a,b
7/r0 = a,b
7/a0 = a,b
8/r0 = a,b

>> input

function f1() { let a.a = 1; let a.b = 2; *a }
function f2() { f1() }
procedure p(*a) { *a }
procedure print(a) { 0 }

let *x = p(f2());

print(x.a);
print(x.b);

>> built strip

0:func () {
  test:2 (r1) <- #1 1
  test:2 let a.a
  test:2 (a.a) <- #2 r1
  test:2 (r2) <- #3 2
  test:2 let a.b
  test:2 (a.b) <- #4 r2
  (*a)
}

1:func () {
  ((0#5))
}

2:proc (*a) {
  (*a)
}

3:proc (a) {
  (0)
}

test:2 define 0
test:3 define 1
test:4 define 2
test:5 define 3
test:7 (*r3) <- (2#7 (1#6))
test:7 let *x
test:7 (*x) <- #8 *r3
test:9 (3#9 x.a)
test:10 (3#10 x.b)

>> unbundle trim

7/Arg(0): a b
7/Return(0): a b
7,6/Return(0): a b
7,6,5/Return(0): a b
8/Return(0): a b

>> test

test returns of nested bundles regression

>> input

procedure print(a) { 0 }

function func1() { 
    let a.a = 0;
    let a.b = 1;
    let a.c = 2;
    *a
}

function func2() { func1() }

procedure p() {
    (func1(),func1())
}

let (*x,*y) = p();

print(x.a);
print(x.c);
print(y.b);
print(y.c);
//print(z.d);

>> built strip

0:proc (a) {
  (0)
}

1:func () {
  test:4 (r1) <- #1 0
  test:4 let a.a
  test:4 (a.a) <- #2 r1
  test:4 (r2) <- #3 1
  test:4 let a.b
  test:4 (a.b) <- #4 r2
  test:4 (r3) <- #5 2
  test:4 let a.c
  test:4 (a.c) <- #6 r3
  (*a)
}

2:func () {
  ((1#7))
}

3:proc () {
  ((1#8),(1#9))
}

test:2 define 0
test:4 define 1
test:11 define 2
test:13 define 3
test:17 (*r4 *r5) <- (3#10)
test:17 let *x
test:17 let *y
test:17 (*x) <- #11 *r4
test:17 (*y) <- #12 *r5
test:19 (0#13 x.a)
test:20 (0#14 x.c)
test:21 (0#15 y.b)
test:22 (0#16 y.c)

>> unbundle trim

10/Return(0): a c
10/Return(1): b c
10,8/Return(0): a c
10,9/Return(0): b c
11/Return(0): a c
12/Return(0): b c

>> test

>> input

procedure print(a) { 0 }

function func1() { 
    let a.a = 0;
    let a.b = 1;
    let a.c = 2;
    *a
}

function func2() { func1() }

procedure p() {
    let a.d = 3;
    (func1(),func2(),*a)
}

let (*x,*y,*z) = p();
let (*m,*n) = (func1(),func2());

print(m.a);
print(m.b);
print(m.c);
print(n.a);
print(x.a);
print(x.c);
print(y.b);
print(y.c);
print(z.d);

>> built strip

0:proc (a) {
  (0)
}

1:func () {
  test:4 (r1) <- #1 0
  test:4 let a.a
  test:4 (a.a) <- #2 r1
  test:4 (r2) <- #3 1
  test:4 let a.b
  test:4 (a.b) <- #4 r2
  test:4 (r3) <- #5 2
  test:4 let a.c
  test:4 (a.c) <- #6 r3
  (*a)
}

2:func () {
  ((1#7))
}

3:proc () {
  test:13 (r4) <- #8 3
  test:13 let a.d
  test:13 (a.d) <- #9 r4
  ((1#10),(2#11),*a)
}

test:2 define 0
test:4 define 1
test:11 define 2
test:13 define 3
test:18 (*r5 *r6 *r7) <- (3#12)
test:18 let *x
test:18 let *y
test:18 let *z
test:18 (*x) <- #13 *r5
test:18 (*y) <- #14 *r6
test:18 (*z) <- #15 *r7
test:19 (*r8) <- #17 (1#16)
test:19 (*r9) <- #19 (2#18)
test:19 let *m
test:19 let *n
test:19 (*m) <- #20 *r8
test:19 (*n) <- #21 *r9
test:21 (0#22 m.a)
test:22 (0#23 m.b)
test:23 (0#24 m.c)
test:24 (0#25 n.a)
test:25 (0#26 x.a)
test:26 (0#27 x.c)
test:27 (0#28 y.b)
test:28 (0#29 y.c)
test:29 (0#30 z.d)

>> unbundle trim

12/Return(0): a c
12/Return(1): b c
12/Return(2): d
12,10/Return(0): a c
12,11/Return(0): b c
12,11,7/Return(0): b c
13/Return(0): a c
14/Return(0): b c
15/Return(0): d
17/Return(0): a b c
17,16/Return(0): a b c
19/Return(0): a
19,18/Return(0): a
19,18,7/Return(0): a
20/Return(0): a b c
21/Return(0): a

>> test

test anon regression

>> input

procedure print(a) { 0 }
procedure proc1() {
    let a.a = 0;
    (*a,1)
}

let (*b,c) = proc1();
print(b.a);

>> built strip

0:proc (a) {
  (0)
}

1:proc () {
  test:3 (r1) <- #1 0
  test:3 let a.a
  test:3 (a.a) <- #2 r1
  (*a,1)
}

test:2 define 0
test:3 define 1
test:8 (*r2 r3) <- (1#3)
test:8 let *b
test:8 let c
test:8 (*b) <- #4 *r2
test:8 (c) <- #5 r3
test:9 (0#6 b.a)

>> unbundle trim

3/Return(0): a
4/Return(0): a

>> test

test anon regression2

>> input

procedure print(a) { 0 }

function func1() {
    let a.a = 0;
    *a
}

let *b = func1();
print(b.z);

>> built strip

0:proc (a) {
  (0)
}

1:func () {
  test:4 (r1) <- #1 0
  test:4 let a.a
  test:4 (a.a) <- #2 r1
  (*a)
}

test:2 define 0
test:4 define 1
test:9 (*r2) <- #4 (1#3)
test:9 let *b
test:9 (*b) <- #5 *r2
test:10 (0#6 b.z)

>> unbundle trim

4/Return(0): z
4,3/Return(0): z
5/Return(0): z
