>> test

code smoke 1

>> input

code __code_infseq(?X) -> seq(?X) {
  impl (r1: ?X) -> r2: seq(?X) {}
}

code __code_finseq() -> seq(?X) {
  impl () -> r1: seq(?X) {}
}

code __code_push(seq(?X), ?X) -> seq(?X) {
  impl (r1: seq(?X), r2: ?X) -> r3: seq(?X) {}
}

function __operator_infseq(x) { let y = __code_infseq(x); y }
function __operator_finseq() { let y = __code_finseq(); y }
procedure __operator_push(x,y) { let y = __code_push(x,y); y }

code test(seq(?X) length(?X), boolean) -> (seq(boolean) ref(?X),seq(?X)) {
  impl (r1: seq(number), r2: boolean) -> (r3: seq(boolean), r1) {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }

  impl (r1: seq(string), r2: boolean) -> (r3: seq(boolean), r1) {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }
}

code test(seq(?X) length(?X), number) -> (seq(boolean) ref(?X),seq(?X)) {
  impl (r1: seq(number), 0) -> (r3: seq(boolean), r1) {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }

  impl (r1: seq(string), 0) -> (r3: seq(boolean), r1) {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }
}

let y = [1,2,3];
let x = test(y,true);

>> built strip

0: code __code_infseq(?X ) -> (seq(?X) )  {
   impl (r1 : ?X) -> (r2 : seq(?X))  {}
}

1: code __code_finseq() -> (seq(?X) )  {
   impl () -> (r1 : seq(?X))  {}
}

2: code __code_push(seq(?X) , ?X ) -> (seq(?X) )  {
   impl (r1 : seq(?X), r2 : ?X) -> (r3 : seq(?X))  {}
}

3:func (x) {
  test:14 (r1) <- (0#1 x)
  test:14 let y
  test:14 (y) <- #2 r1
  (y)
}

4:func () {
  test:15 (r2) <- (1#3)
  test:15 let y
  test:15 (y) <- #4 r2
  (y)
}

5:proc (x,y) {
  test:16 (r3) <- (2#5 x y)
  test:16 let y
  test:16 (y) <- #6 r3
  (y)
}

6: code test(seq(?X) length(X), boolean ) -> (seq(boolean) ref(X), seq(?X) )  {
  impl (r1 : seq(number), r2 : boolean) -> (r3 : seq(boolean), r1)  {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }

  impl (r1 : seq(string), r2 : boolean) -> (r3 : seq(boolean), r1)  {
    register r4;
    opcode 45, r1, r2, r3, r4;
  }
}


 code test(seq(?X) length(X), number ) -> (seq(boolean) ref(X), seq(?X) )  {
   impl (r1 : seq(number), 0) -> (r3 : seq(boolean), r1)  {
     register r4;
     opcode 45, r1, r2, r3, r4;
   }


   impl (r1 : seq(string), 0) -> (r3 : seq(boolean), r1)  {
     register r4;
     opcode 45, r1, r2, r3, r4;
   }
}

test:14 define 3
test:15 define 4
test:16 define 5
test:42 (r5) <- (4#7)
test:42 (r5) <- (5#8 r5 1)
test:42 (r5) <- (5#9 r5 2)
test:42 (r5) <- (5#10 r5 3)
test:42 (r4) <- #11 r5
test:42 let y
test:42 (y) <- #12 r4
test:43 (r6) <- (6#13 y true)
test:43 let x
test:43 (x) <- #14 r6

>> linearize strip

test:15 r1 (3) 
test:15 r2 <copy-from> r1
test:15 r3 <copy-from> r2
test:15 r4 <copy-from> r3
test:42 r5 <copy-from> r4
test:42 r6 <copy-from> r5
test:42 r7 <constant> 1
test:16 r8 <copy-from> r6
test:16 r9 <copy-from> r7
test:16 r10 <copy-from> r8
test:16 r11 <copy-from> r9
test:16 r12 (5) r10 r11
test:16 r13 <copy-from> r12
test:16 r14 <copy-from> r13
test:16 r15 <copy-from> r14
test:42 r5 <copy-from> r15
test:42 r16 <copy-from> r5
test:42 r17 <constant> 2
test:16 r18 <copy-from> r16
test:16 r19 <copy-from> r17
test:16 r20 <copy-from> r18
test:16 r21 <copy-from> r19
test:16 r22 (5) r20 r21
test:16 r13 <copy-from> r22
test:16 r23 <copy-from> r13
test:16 r24 <copy-from> r23
test:42 r5 <copy-from> r24
test:42 r25 <copy-from> r5
test:42 r26 <constant> 3
test:16 r27 <copy-from> r25
test:16 r28 <copy-from> r26
test:16 r29 <copy-from> r27
test:16 r30 <copy-from> r28
test:16 r31 (5) r29 r30
test:16 r13 <copy-from> r31
test:16 r32 <copy-from> r13
test:16 r33 <copy-from> r32
test:42 r5 <copy-from> r33
test:42 r34 <copy-from> r5
test:42 r35 <copy-from> r34
test:42 r36 <copy-from> r35
test:42 r37 <copy-from> r36
test:43 r38 <copy-from> r37
test:43 r39 <constant> true
test:43 r40 r41 (13) r38 r39
test:43 r42 <copy-from> r40
test:43 r43 <copy-from> r42
test:43 r44 <copy-from> r43
