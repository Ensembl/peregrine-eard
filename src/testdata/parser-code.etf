>> test

Code block smoke

>> input

world code test(r1: seq(number)|seq(string) length(?X), r2: boolean length(?X...)) -> (r3: seq(boolean) ref(?X), r5: boolean) {
    register r4;
    opcode 44, r1, r2, r3, r4, r5;
}

>> parse strip

[
    PTStatement{
        value: Code(
            world code test(r1:seq(number)|seq(string)length(X),r2:booleanlength(X...)) -> (r3 : seq(boolean) ref(X),r5: boolean) {
                register r4;
                opcode 44,r1,r2,r3,r4,r5;
            }
        ),
        file:["test"],
        line_no:2,
        context:1
    }
]

>> test

Code wild types

>> input

code test(r1: seq(?X)) -> (r2: seq(?X)) {
    opcode 42, r1, r2;
}

>> parse strip

[
    PTStatement{
        value: Code(
            code test(r1:seq(?X)) -> (r2:seq(?X)){
                opcode42,r1,r2;
            }
        ),
        file:["test"],
        line_no:2,
        context:1
    }
]

>> test

Code wild checks

>> input

code test(r1: seq(?X) length(?Y)) -> (r2: seq(?X) length(?Y), r3: seq(boolean) ref(?Y)) {
    opcode 42, r1, r2;
}

>> parse strip

[
    PTStatement{
        value:Code(
            code test(r1 : seq(?X)length(Y))->(r2 : seq(?X)length(Y), r3 : seq(boolean)ref(Y)) {
                opcode42,r1,r2;
            }
        ),
        file:["test"],
        line_no: 2,
        context:1
    }
]

>> test

Code unbracketed return

>> input

code test(r1: boolean) -> r2: seq(boolean) {
    opcode 42, r1, r2;
}

>> parse strip

[
    PTStatement{
        value: Code(
            code test(r1:boolean) -> (r2:seq(boolean)) {
                opcode42,r1,r2;
            }
        ),
        file:["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Code constants

>> input

code test_bool(r1: boolean, false) {
    opcode 42, r1, r2;
}

code test_number(r1: boolean, 42) {
    opcode 42, r1, r2;
}

code test_string(r1: boolean, "hello") {
    opcode 42, r1, r2;
}

>> parse strip

[
    PTStatement {
        value: Code(
            code test_bool(r1:boolean,false) {
                opcode 42,r1,r2;
            }
        ),
        file:["test"],
        line_no:2,
        context:1
    },
    PTStatement {
        value:Code(
            code test_number(r1:boolean,42){
                opcode42,r1,r2;
            }
        ),
        file:["test"],
        line_no:6,
        context:1
    },
    PTStatement{
        value:Code(
            code test_string(r1:boolean,"hello"){
                opcode42,r1,r2;
            }
        ),
        file:["test"],
        line_no:10,
        context:1
    }
]

>> test

Code checks no types

>> input

code test_string(r1) {
    opcode 42, r1, r2;
}

>> parse-fail strip

expected code_argument

>> test

Code no args, no return

>> input

code test_string() {
    opcode 42;
}

>> parse strip

[
    PTStatement{
        value:Code(
            code test_string(){
                opcode42;
            }
        ),
        file:["test"],
        line_no:2,
        context:1
    }
]
