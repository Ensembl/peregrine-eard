>> test

Check true and false are behaving

>> input

let x = [true,false];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([
                Constant(true),
                Constant(false)
            ])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test 

Number parsing

>> input
let x = [1, 2, -3, 4e1, 5.5e-1, -6.5e-2, 7e-3];

>> parse strip
[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([
                Constant(1),
                Constant(2),
                Constant(-3),
                Constant(40),
                Constant(0.55),
                Constant(-0.065),
                Constant(0.007)
            ])]
        ),
        file: ["test"],
        line_no: 1,
        context: 1
    }
]

>> test

Simple string parsing

>> input

let x = ["hello","","\"","\\\"","\u002e","\u002F","\u20AC","\n\r\b\t\f","\u0030\u0031"];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([
                Constant("hello"),
                Constant(""),
                Constant("\""),
                Constant("\\\""),
                Constant("."),
                Constant("/"),
                Constant("€"),
                Constant("\n\r\u{8}\t\u{12}"),
                Constant("01")
            ])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Multi-line string parsing

>> input

let x = [
    """hello""",
    """""",
    """\"""",
    """\\\"""",
    """\u002e""",
    """\u002F""",
    """\u20AC""",
    """\n\r\b\t\f""",
    """\u0030\u0031""",
    """"hello""",
    """h"e"l"l"o"""
];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([
                Constant("hello"),
                Constant(""),
                Constant("\""),
                Constant("\\\""),
                Constant("."),
                Constant("/"),
                Constant("€"),
                Constant("\n\r\u{8}\t\u{12}"),
                Constant("01"),
                Constant("\"hello"),
                Constant("h\"e\"l\"l\"o")
            ])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Check other unquoted identifiers are parsed as variables

>> input

let x = [true,false,frue,talse];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([
                Constant(true),
                Constant(false),
                Variable(frue),
                Variable(talse)
            ])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Check sequences

>> input

let a = [];
let b = [1,2,3];
let c = [false,false,true];
let d = ["hello","world"];
let e = [0,x,y,z];

>> parse strip

[
    PTStatement {
        value: LetStatement([(a,[])],[FiniteSequence([])]),
        file: ["test"],
        line_no: 2,
        context: 1
    },
    PTStatement {
        value: LetStatement([(b,[])],[FiniteSequence([
                Constant(1),Constant(2),Constant(3)
        ])]),
        file: ["test"],
        line_no: 3,
        context: 1
    },
    PTStatement {
        value: LetStatement([(c,[])],[FiniteSequence([
            Constant(false),Constant(false),Constant(true)
        ])]),
        file: ["test"],
        line_no: 4,
        context: 1
    },
    PTStatement {
        value: LetStatement([(d,[])],[FiniteSequence([
            Constant("hello"),Constant("world")
        ])]),
        file: ["test"],
        line_no: 5,
        context: 1
    },
    PTStatement {
        value: LetStatement([(e,[])],[FiniteSequence([
            Constant(0),
            Variable(x),
            Variable(y),
            Variable(z)
        ])]),
        file: ["test"],
        line_no: 6,
        context: 1
    }
]

>> test

Bad strings 1

>> input

let x = "hello\uGHIJ";

>> parse-fail strip

expected expr_or_bundle
>> test

Bad strings 2

>> input

let x = "hello\w";

>> parse-fail strip

expected expr_or_bundle

>> test

Bad strings 3

>> input

let x = "hello\u00\u01";

>> parse-fail strip

expected expr_or_bundle