>> test

Check left-recursive

>> input

let x = 1 || 2 || 3;

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Infix(
                Infix(Constant(Number(1.0)),"||",Constant(Number(2.0))),
                "||",
                Constant(Number(3.0))
            )]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

General prcedence test

1 || 2 && 3 == 4 > 5 + 6 * 7 / 8 - 9 < 10 != 11 && 12 || 13
is
(1 || ((2 && ((3 == ((4 > ((5 + ((6 * 7) / 8)) - 9)) < 10)) != 11)) && 12)) || 13

>> input

let x = 1 || 2 && 3 == 4 > 5 + 6 * 7 / 8 - 9 < 10 != 11 && 12 || 13;

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Infix(
                Infix(
                    Constant(Number(1.0)),
                    "||",
                    Infix(
                        Infix(
                            Constant(Number(2.0)),
                            "&&",
                            Infix(
                                Infix(
                                    Constant(Number(3.0)),
                                    "==",
                                    Infix(
                                        Infix(
                                            Constant(Number(4.0)),
                                            ">",
                                            Infix(
                                                Infix(
                                                    Constant(Number(5.0)),
                                                    "+",
                                                    Infix(
                                                        Infix(
                                                            Constant(Number(6.0)),
                                                            "*",
                                                            Constant(Number(7.0))
                                                        ),
                                                        "/",
                                                        Constant(Number(8.0))
                                                    )
                                                ),
                                                "-",
                                                Constant(Number(9.0))
                                            )
                                        ),
                                        "<",
                                        Constant(Number(10.0))
                                    )
                                ),
                                "!=",
                                Constant(Number(11.0))
                            )
                        ),
                        "&&",
                        Constant(Number(12.0))
                    )
                ),
                "||",
                Constant(Number(13.0))
            )]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Brackets override precedence

>> input

let x = 1+2*3;
let y = (1+2)*3;

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Infix(
                Constant(Number(1.0)),
                "+",
                Infix(
                    Constant(Number(2.0)),
                    "*",
                    Constant(Number(3.0))
                )
            )]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    },
    PTStatement {
        value: LetStatement(
            [(y,[])],
            [Infix(
                Infix(
                    Constant(Number(1.0)),
                    "+",
                    Constant(Number(2.0))
                ),
                "*",
                Constant(Number(3.0))
            )]
        ),
        file: ["test"],
        line_no: 3,
        context: 1
    }
]

>> test

Finite and infinite sequences

>> input

let x = [1,2,3];
let y = [1,...];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [FiniteSequence([Constant(Number(1.0)),Constant(Number(2.0)),Constant(Number(3.0))])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    },
    PTStatement {
        value: LetStatement(
            [(y,[])],
            [InfiniteSequence(Constant(Number(1.0)))]
        ),
        file: ["test"],
        line_no: 3,
        context: 1
    }
]

>> test

Prefix operators

>> input

let x = -x - -y && !z;

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Infix(
                Infix(
                    Prefix(
                        "-",
                        Variable(x)
                    ),
                    "-",
                    Prefix(
                        "-",
                        Variable(y)
                    )
                ),
                "&&",
                Prefix(
                    "!",
                    Variable(z)
                )
            )]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Function calls / repeaters

>> input

let **a = [1+y(**b)+3*z(zz()),x(2,c,*d)];

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [**a],
            [FiniteSequence([
                Infix(
                    Infix(
                        Constant(Number(1.0)),
                        "+",
                        Call(PTCall{
                            name: "y",
                            args:[**b],
                            is_macro:false
                        })
                    ),
                    "+",
                    Infix(
                        Constant(Number(3.0)),
                        "*",
                        Call(PTCall{
                            name: "z",
                            args:[
                                Call(PTCall{name:"zz",args:[],is_macro:false})
                            ],
                            is_macro:false
                        })
                    )
                ),
                Call(PTCall{
                    name:"x",
                    args:[
                        Constant(Number(2.0)),
                        Variable(c),
                        *d
                    ],
                    is_macro:false
                })
            ])]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]
