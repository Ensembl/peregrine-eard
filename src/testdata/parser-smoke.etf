>> test

This file contains general purpose tests just to make sure everything is basically fine and
for experimentation. More targetted testing is in other files.

>> input

/* world indicates global state is modified */
world code print(string) {
    impl(r1: string) {
        opcode 42, r1;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            world code print(string) {
                impl(r1: string) {
                    opcode 42, r1;
                }
            }),
        position: test:3,
        context: 1
    }
]

>> test

>> input

// regular
code add(number,number) -> number {
    impl(r1: number, r2:number) -> (r3:number) {
        opcode 23, r3, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code add(number,number) -> (number) {
                impl(r1: number, r2:number) -> (r3:number) {
                    opcode 23, r3, r1, r2;
                }
            }
        ),
        position: test:3,
        context: 1
    }
]

>> test

>> input

// modify
code add(number,number) -> (number) {
    impl (r1: number, r2: number) -> r1 {
        opcode 24, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code add(number,number) -> (number) {
                impl (r1: number, r2: number) -> (r1) {
                    opcode 24, r1, r2;
                }
            }
        ),
        position: test:3,
        context: 1
    }
]

>> test

>> input

// increment
code add(number,number) -> number {
    impl (r1: number,1) -> r1 {
        opcode 25, r1;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code add(number,number) -> (number) {
                impl (r1: number,1) -> (r1) {
                    opcode 25, r1;
                }
            }
        ),
        position: test:3,
        context: 1
    }
]

>> test

>> input

code count_to_index(seq(number) total(?X) length(?Y)) -> (seq(number) length(?X) ref(?Y)) {
    impl (r1: seq(number)) -> (r2: seq(number)) {
        opcode 43, r1, r2;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code count_to_index(seq(number) total(X) length(Y)) -> (seq(number) length(X) ref(Y)) {
                impl (r1: seq(number)) -> (r2: seq(number)) {
                    opcode 43, r1, r2;
                }
            }
        ),
        position: test:2,
        context: 1
    }
] 

>> test

>> input

code len(seq(?X)) -> (number) {
    impl (r1: seq(?X)) -> (r2: number) {
        opcode 16, r2, r1;
    }
}

>> parse strip

[
    PTStatement {
        value: Code(
            code len(seq(?X)) -> (number) {
                impl (r1: seq(?X)) -> (r2: number) {
                    opcode 16, r2, r1;
                }
            }
        ),
        position: test:2,
        context: 1
    }
]

>> test

>> input

include "test1";
flag "opt1";

>> parse strip

[
    PTStatement {
        value: Include("test1",false), 
        position: test:2,
        context: 1
    },
    PTStatement {
        value: Flag("opt1"),
        position: test:3,
        context: 1
    }
]

>> test

>> input

let gn.tr_count : length(gn) total(tr) = [1,2,4-1,x(1,3-1),y()];

>> parse strip

[
    PTStatement {
        value: LetStatement([
            (gn.tr_count,
            [
                length(gn),
                total(tr)
            ])],
            [FiniteSequence([
                Constant(1),
                Constant(2),
                Infix(Constant(4), "-", Constant(1)),
                Call(PTCall { name: "x", args: [
                    Constant(1),
                    Infix(Constant(3), "-", Constant(1))
                ], is_macro: false }),
                Call(PTCall { name: "y", args: [], is_macro: false })
            ])]
        ),
        position: test:2,
        context: 1
    }
]

>> test

>> input

let colour = ["blue", ...];

>> parse strip

[
    PTStatement{
        value: LetStatement([
            (colour,[])
        ],[
            InfiniteSequence(Constant("blue"))
        ]),
        position:test:2,
        context:1
    }
]

>> test

>> input

gn.tr_count = check!(gn.tr_count + 1);

>> parse strip

[
    PTStatement {
        value: ModifyStatement(
            [gn.tr_count],
            [Call(PTCall{
                name: "check",
                args: [
                    Infix(Variable(gn.tr_count),
                    "+",
                    Constant(1))
                ],
                is_macro:true
            })]
        ),
        position:test:2,
        context:1
    }
]

>> test

>> input

let x = macro!();

>> parse strip

[
    PTStatement {
        value: LetStatement(
            [(x,[])],
            [Call(PTCall{
                name: "macro",
                args: [],
                is_macro: true
            })]
        ),
        position:test:2,
        context:1
    }
]

>> test

>> input

z1();

>> parse strip

[
    PTStatement {
        value: BareCall(PTCall { name: "z1", args: [], is_macro: false }),
        position: test:2,
        context: 1
    }
]

>> test

>> input

z2(z3());

>> parse strip

[
    PTStatement {
        value: BareCall(PTCall {
            name: "z2",
            args: [Call(PTCall { name: "z3", args: [], is_macro: false })],
            is_macro: false 
        }),
        position: test:2,
        context: 1
    }
]
