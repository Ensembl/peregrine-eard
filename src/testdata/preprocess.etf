>> test

Basic include/macro smoke test

>> input

let x = 1;
include "include-macro-smoke2.earp";

>> input include-macro-smoke2.earp

let y = 2;
include "include-macro-smoke3.earp";

>> input include-macro-smoke3.earp

let z = 3;

>> preproc strip

[
    PTStatement{
        value: LetStatement([(x,[])],[Constant(1)]),
        file: ["test"],
        line_no: 2,
        context: 1
    },
    PTStatement{
        value: LetStatement([(y,[])],[Constant(2)]),
        file: ["test","include-macro-smoke2.earp"],
        line_no: 2,
        context: 2
    },
    PTStatement{
        value: LetStatement([(z,[])],[Constant(3)]),
        file: ["test","include-macro-smoke2.earp","include-macro-smoke3.earp"],
        line_no: 2,
        context: 3
    }
]

>> test

Missing include

>> input

include "missing";

>> preproc-fail strip

Error loading 'missing': Not found at test:2

>> test

Recursive include

>> input

include "test1";

>> input test1

include "test2";

>> input test2

include "test1";

>> preproc-fail strip

recursive include of test1 at test2:2

>> test

Non-recursive include

>> input

include "test1";

>> input test1

include "test2";
include "test2";

>> input test2

let x = 1;

>> preproc strip

[
    PTStatement {
        value: LetStatement([(x,[])],[Constant(1)]),
        file: ["test","test1","test2"],
        line_no: 2,
        context: 3
    },
    PTStatement{
        value: LetStatement([(x,[])],[Constant(1)]),
        file: ["test","test1","test2"],
        line_no: 2,
        context: 4
    }
]

>> test

Self-recursive include

>> input

include "test1";

>> input test1

include "test1";

>> preproc-fail strip

recursive include of test1 at test1:2

>> test

Proc macros

>> input

x!(2);

>> preproc strip

[
    PTStatement{
        value: LetStatement([(x,[])],[Constant(2)]),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Expr macros

>> input

let x = 4 * y!(z);

>> preproc strip

[
    PTStatement{
        value: LetStatement(
            [(x,[])],
            [Call(PTCall{
                name: "__operator_mul",
                args:[
                    Constant(4),
                    Call(PTCall{
                        name: "__operator_add",
                        args: [
                            Variable(z),
                            Constant(1)
                        ],
                        is_macro:false
                    })
                ],
                is_macro: false
            })]
        ),
        file: ["test"], 
        line_no: 2,
        context: 1
    }
]

>> test

multi loop

>> input

include "test1";

>> input test1

z!();

>> input test2

include "test3";

>> input test3

let x = 1;

>> preproc strip

[
    PTStatement{
        value: LetStatement([(x,[])],[Constant(1)]),
        file: ["test","test1","test2","test3"],
        line_no: 2,
        context: 4
    }
]

>> test

flags

>> input

flag "abc";
flag "def";
include "test2";

>> input test2

flag "ghi";

>> flag

abc
def
ghi

>> test

good repeater

>> input

let **tr_gn = lookup(**gn,tr.gn);

>> preproc strip

[
    PTStatement{
        value: LetStatement(
            [**tr_gn],
            [Call(PTCall{
                name: "lookup",
                args: [
                    **gn,
                    Variable(tr.gn)
                ],
                is_macro: false
            })]
        ),
        file: ["test"],
        line_no: 2,
        context: 1
    }
]

>> test

Operators to functions

>> input

let x = 1 || 2 && 3 == 4 > 5 + 6 * 7 / 8 - 9 < 10 != 11 && 12 || 13;

>> preproc strip

[
    PTStatement{
        value: LetStatement([(x,[])],
        [Call(PTCall{
            name: "__operator_or",
            args:[
                Call(PTCall{
                    name: "__operator_or",
                    args:[
                        Constant(1),
                        Call(PTCall{
                            name: "__operator_and",
                            args:[
                                Call(PTCall{
                                    name: "__operator_and",
                                    args:[
                                        Constant(2),
                                        Call(PTCall{
                                            name: "__operator_ne",
                                            args:[
                                                Call(PTCall{
                                                    name: "__operator_eq",
                                                    args:[
                                                        Constant(3),
                                                        Call(PTCall{
                                                            name: "__operator_lt",
                                                            args:[
                                                                Call(PTCall{
                                                                    name: "__operator_gt",
                                                                    args:[
                                                                        Constant(4),
                                                                        Call(PTCall{
                                                                            name: "__operator_sub",
                                                                            args:[
                                                                                Call(PTCall{
                                                                                    name: "__operator_add",args:[
                                                                                        Constant(5),
                                                                                        Call(PTCall{
                                                                                            name: "__operator_div ",
                                                                                            args:[
                                                                                                Call(PTCall{
                                                                                                    name: "__operator_mul",
                                                                                                    args:[
                                                                                                        Constant(6),
                                                                                                        Constant(7)
                                                                                                    ],
                                                                                                    is_macro:false
                                                                                                }),
                                                                                                Constant(8)
                                                                                            ],
                                                                                            is_macro: false
                                                                                        })],
                                                                                        is_macro: false
                                                                                    }),
                                                                                    Constant(9)
                                                                                ],
                                                                                is_macro: false
                                                                            })
                                                                        ],
                                                                        is_macro: false
                                                                    }),
                                                                    Constant(10)
                                                                ],
                                                                is_macro: false
                                                            })
                                                        ],
                                                        is_macro: false
                                                    }),
                                                    Constant(11)
                                                ],
                                                is_macro: false
                                            })
                                        ],
                                        is_macro:false
                                    }),
                                    Constant(12)
                                ],
                                is_macro:false
                            })
                        ],
                        is_macro:false
                    }),
                    Constant(13)
                ],
                is_macro:false
            })
        ]),
        file:["test"],
        line_no:2,
        context: 1
    }
]
