>> test

repeater proc smoke

0 = print
1 = thru [#8]
2 = drain [#10]

>> input

procedure print(a) { 0 }
function f(x) { x }
procedure p(x,y) { x }

let b.a = 1;
let b.b = 2;
let b.c = 3;

let **a = p(f(**b,1),2);

print(a.a);
print(a.c);

>> built strip

0:proc (a) {
  (0)
}

1:func (x) {
  (x)
}

2:proc (x,y) {
  (x)
}

test:2 define 0
test:3 define 1
test:4 define 2
test:6 (r1) <- #1 1
test:6 let b.a
test:6 (b.a) <- #2 r1
test:7 (r2) <- #3 2
test:7 let b.b
test:7 (b.b) <- #4 r2
test:8 (r3) <- #5 3
test:8 let b.c
test:8 (b.c) <- #6 r3
test:10 let **a
test:10 (**a) <- (2#8 (1#7 **b 1) 2)
test:12 (0#9 a.a)
test:13 (0#10 a.c)

>> unbundle trim

8/Repeater: a c

>> trace strip

statement = test:13 (0#10 a.c)
  procedure = (0#10 a.c)
    ret bundles=[]
    push namespace
  regular procedure
  exprs = [0]
  expr = 0 expect = None
    arg bundles = [None]
    pop namespace
  expr = a.c expect = None
      use of a.c

statement = test:12 (0#9 a.a)
  procedure = (0#9 a.a)
    ret bundles=[]
    push namespace
  regular procedure
  exprs = [0]
  expr = 0 expect = None
    arg bundles = [None]
    pop namespace
  expr = a.a expect = None
      use of a.a

statement = test:10 (**a) <- (2#8 (1#7 **b 1) 2)
  procedure = (**a) <- (2#8 (1#7 **b 1) 2)
    ret bundles=[None]
    push namespace
  regular procedure
  exprs = [x]
  expr = x expect = None
    arg bundles = [None, None]
    pop namespace
  expr = (1#7 **b 1) expect = None
  function = (1#7 **b 1)
    push namespace
  expr = x expect = None
    pop namespace
  expr = 2 expect = None

statement = test:10 let **a
  declare = **a

statement = test:8 (b.c) <- #6 r3
  procedure = (b.c) <- #6 r3
    ret bundles=[None]
  assignment
  exprs = [r3]
  expr = r3 expect = None
  expr = r3 expect = None

statement = test:8 let b.c
  declare = b.c

statement = test:8 (r3) <- #5 3
  procedure = (r3) <- #5 3
    ret bundles=[None]
  assignment
  exprs = [3]
  expr = 3 expect = None
  expr = 3 expect = None

statement = test:7 (b.b) <- #4 r2
  procedure = (b.b) <- #4 r2
    ret bundles=[None]
  assignment
  exprs = [r2]
  expr = r2 expect = None
  expr = r2 expect = None

statement = test:7 let b.b
  declare = b.b

statement = test:7 (r2) <- #3 2
  procedure = (r2) <- #3 2
    ret bundles=[None]
  assignment
  exprs = [2]
  expr = 2 expect = None
  expr = 2 expect = None

statement = test:6 (b.a) <- #2 r1
  procedure = (b.a) <- #2 r1
    ret bundles=[None]
  assignment
  exprs = [r1]
  expr = r1 expect = None
  expr = r1 expect = None

statement = test:6 let b.a
  declare = b.a

statement = test:6 (r1) <- #1 1
  procedure = (r1) <- #1 1
    ret bundles=[None]
  assignment
  exprs = [1]
  expr = 1 expect = None
  expr = 1 expect = None

statement = test:4 define 2

statement = test:3 define 1

statement = test:2 define 0

>> test

repeater with bundle smoke

>> input

function __operator_add(x,y) { /* dummy */ 0 }

procedure print(a) { 0 }
function f(x,*y) { x+y.x }
procedure p(x,y) { x }

let b.a = 1;
let b.b = 2;
let b.c = 3;
let c.x = 4;

let **a = p(f(**b,*c),2);

print(a.a);
print(a.c);

>> built strip

0:func (x,y) {
  (0)
}

1:proc (a) {
  (0)
}

2:func (x,*y) {
  ((0#1 x y.x))
}

3:proc (x,y) {
  (x)
}

test:2 define 0
test:4 define 1
test:5 define 2
test:6 define 3
test:8 (r1) <- #2 1
test:8 let b.a
test:8 (b.a) <- #3 r1
test:9 (r2) <- #4 2
test:9 let b.b
test:9 (b.b) <- #5 r2
test:10 (r3) <- #6 3
test:10 let b.c
test:10 (b.c) <- #7 r3
test:11 (r4) <- #8 4
test:11 let c.x
test:11 (c.x) <- #9 r4
test:13 let **a
test:13 (**a) <- (3#11 (2#10 **b *c) 2)
test:15 (1#12 a.a)
test:16 (1#13 a.c)

>> unbundle trim

11/Repeater: a c
11,10/Arg(1): x
